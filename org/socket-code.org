* zms sock
  file:./src/zm_stream.cpp::295        snprintf( loc_sock_path, sizeof(loc_sock_path), "%s/zms-%06ds.sock", config.path_socks, connkey );
  file:.src/zm_stream.cpp::305        snprintf( rem_sock_path, sizeof(rem_sock_path), "%s/zms-%06dw.sock", config.path_socks, connkey );
  file:./web/ajax/stream.php::15 $locSockFile = ZM_PATH_SOCKS.'/zms-'.sprintf("%06d",$_REQUEST['connkey']).'w.sock';
  file:./web/ajax/stream.php::48 $remSockFile = ZM_PATH_SOCKS.'/zms-'.sprintf("%06d",$_REQUEST['connkey']).'s.sock';
* Web
  file:./src/zm_rtp_ctrl.cpp::271    SockAddrInet localAddr, remoteAddr;
  file:./src/zm_rtp_ctrl.cpp:274:    UdpInetSocket rtpCtrlServer;
  file:./src/zm_rtp_ctrl.cpp:312:            if ( UdpInetSocket *socket = dynamic_cast<UdpInetSocket *>(*iter) )
  file:./src/zm_rtp_ctrl.cpp:314:                ssize_t nBytes = socket->recv( buffer, sizeof(buffer) );
  file:./src/zm_rtp_ctrl.cpp:315:                Debug( 4, "Read %zd bytes on sd %d", nBytes, socket->getReadDesc() );
  file:./src/zm_remote_camera_rtsp.h:38:	struct sockaddr_in rtsp_sa;
  file:./src/zm_remote_camera_rtsp.h:39:	struct sockaddr_in rtcp_sa;
  file:./src/zm_remote_camera_http.h:39:	//struct sockaddr_in sa;

file:./src/zm_stream.cpp::289:        sd = socket( AF_UNIX, SOCK_DGRAM, 0 );
file:./src/zm_stream.cpp::292            Fatal( "Can't create socket: %s", strerror(errno) );
file:./src/zm_stream.cpp:295:        snprintf( loc_sock_path, sizeof(loc_sock_path), "%s/zms-%06ds.sock", config.path_socks, connkey );
file:./src/zm_stream.cpp:296:        unlink( loc_sock_path );
file:./src/zm_stream.cpp:298:        strncpy( loc_addr.sun_path, loc_sock_path, sizeof(loc_addr.sun_path) );
file:./src/zm_stream.cpp:300:        if ( bind( sd, (struct sockaddr *)&loc_addr, strlen(loc_addr.sun_path)+sizeof(loc_addr.sun_family)) < 0 )
file:./src/zm_stream.cpp:305:        snprintf( rem_sock_path, sizeof(rem_sock_path), "%s/zms-%06dw.sock", config.path_socks, connkey );
file:./src/zm_stream.cpp:306:        strncpy( rem_addr.sun_path, rem_sock_path, sizeof(rem_addr.sun_path) );
file:./src/zm_stream.cpp:320:        if ( loc_sock_path[0] )
file:./src/zm_stream.cpp:322:            unlink( loc_sock_path );

file:./SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:68:    SockAddrInet localAddr;
file:./SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:69:    UdpInetServer rtpDataSocket;
file:./SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:74:    if ( !rtpDataSocket.bind( localAddr ) )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:79:    select.addReader( &rtpDataSocket );
file:./SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:95:             if ( UdpInetServer *socket = dynamic_cast<UdpInetServer *>(*iter) )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:97:                 int nBytes = socket->recv( buffer, sizeof(buffer) );
file:./SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:98:                 Debug( 4, "Got %d bytes on sd %d", nBytes, socket->getReadDesc() );
file:./SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:115:    rtpDataSocket.close();
file:./SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:66:#define ZM_PATH_SOCKS 62
file:./SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:136:#define ZM_FRAME_SOCKET_SIZE 132
file:./SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:286:	const char *path_socks;\
file:./SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:356:	int frame_socket_size;\
file:./SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:504:	path_socks = (const char *)config.Item( ZM_PATH_SOCKS );\
file:./SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:574:	frame_socket_size = (int)config.Item( ZM_FRAME_SOCKET_SIZE );\
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:33://#include <sys/socket.h>
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:124:SockAddr::SockAddr( const struct sockaddr *addr ) : mAddr( addr )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:128:SockAddr *SockAddr::newSockAddr( const struct sockaddr &addr, socklen_t len )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:130:    if ( addr.sa_family == AF_INET && len == SockAddrInet::addrSize() )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:132:        return( new SockAddrInet( (const struct sockaddr_in *)&addr ) );
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:134:    else if ( addr.sa_family == AF_UNIX && len == SockAddrUnix::addrSize() )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:136:        return( new SockAddrUnix( (const struct sockaddr_un *)&addr ) );
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:138:    Error( "Unable to create new SockAddr from addr family %d with size %d", addr.sa_family, len );
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:142:SockAddr *SockAddr::newSockAddr( const SockAddr *addr )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:149:        return( new SockAddrInet( *(SockAddrInet *)addr ) );
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:153:        return( new SockAddrUnix( *(SockAddrUnix *)addr ) );
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:155:    Error( "Unable to create new SockAddr from addr family %d", addr->getDomain() );
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:159:SockAddrInet::SockAddrInet() : SockAddr( (struct sockaddr *)&mAddrIn )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:163:bool SockAddrInet::resolve( const char *host, const char *serv, const char *proto )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:188:bool SockAddrInet::resolve( const char *host, int port, const char *proto )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:205:bool SockAddrInet::resolve( const char *serv, const char *proto )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:223:bool SockAddrInet::resolve( int port, const char *proto )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:234:SockAddrUnix::SockAddrUnix() : SockAddr( (struct sockaddr *)&mAddrUn )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:238:bool SockAddrUnix::resolve( const char *path, const char *proto )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:248:bool Socket::socket()
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:253:	if ( (mSd = ::socket( getDomain(), getType(), 0 ) ) < 0 )
file:./SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:255:		Error( "socket(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:261:	(void)::setsockopt( mSd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:262:	(void)::setsockopt( mSd, SOL_SOCKET, SO_KEEPALIVE, &val, sizeof(val) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:269:bool Socket::connect()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:271:	if ( !socket() ) 
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:286:bool Socket::bind()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:288:	if ( !socket() )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:300:bool Socket::listen()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:314:bool Socket::accept()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:316:    struct sockaddr *rem_addr = mLocalAddr->getTempAddr();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:317:    socklen_t rem_addr_size = getAddrSize();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:335:bool Socket::accept( int &newSd )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:337:    struct sockaddr *rem_addr = mLocalAddr->getTempAddr();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:338:    socklen_t rem_addr_size = getAddrSize();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:351:bool Socket::close()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:359:int Socket::bytesToRead() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:371:bool Socket::getBlocking( bool &blocking )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:384:bool Socket::setBlocking( bool blocking )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:422:bool Socket::getSendBufferSize( int &buffersize ) const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:424:	socklen_t optlen = sizeof(buffersize);
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:425:	if ( getsockopt( mSd, SOL_SOCKET, SO_SNDBUF, &buffersize, &optlen ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:427:		Error( "getsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:433:bool Socket::getRecvBufferSize( int &buffersize ) const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:435:	socklen_t optlen = sizeof(buffersize);
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:436:	if ( getsockopt( mSd, SOL_SOCKET, SO_RCVBUF, &buffersize, &optlen ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:438:		Error( "getsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:444:bool Socket::setSendBufferSize( int buffersize )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:446:	if ( setsockopt( mSd, SOL_SOCKET, SO_SNDBUF, (char *)&buffersize, sizeof(buffersize)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:448:		Error( "setsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:454:bool Socket::setRecvBufferSize( int buffersize )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:456:	if ( setsockopt( mSd, SOL_SOCKET, SO_RCVBUF, (char *)&buffersize, sizeof(buffersize)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:458:		Error( "setsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:464:bool Socket::getRouting( bool &route ) const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:467:	socklen_t optlen = sizeof(dontRoute);
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:468:	if ( getsockopt( mSd, SOL_SOCKET, SO_DONTROUTE, &dontRoute, &optlen ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:470:		Error( "getsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:477:bool Socket::setRouting( bool route )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:480:	if ( setsockopt( mSd, SOL_SOCKET, SO_DONTROUTE, (char *)&dontRoute, sizeof(dontRoute)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:482:		Error( "setsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:488:bool Socket::getNoDelay( bool &nodelay ) const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:491:	socklen_t optlen = sizeof(int_nodelay);
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:492:	if ( getsockopt( mSd, IPPROTO_TCP, TCP_NODELAY, &int_nodelay, &optlen ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:494:		Error( "getsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:501:bool Socket::setNoDelay( bool nodelay )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:505:	if ( setsockopt( mSd, IPPROTO_TCP, TCP_NODELAY, (char *)&int_nodelay, sizeof(int_nodelay)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:507:		Error( "setsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:515:    return( Socket::listen() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:520:    return( Socket::accept() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:523:bool TcpInetServer::accept( TcpInetSocket *&newSocket )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:526:    newSocket = 0;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:528:    if ( !Socket::accept( newSd ) )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:531:	newSocket = new TcpInetSocket( *this, newSd );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:536:bool TcpUnixServer::accept( TcpUnixSocket *&newSocket )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:539:    newSocket = 0;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:541:    if ( !Socket::accept( newSd ) )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:544:	newSocket = new TcpUnixSocket( *this, newSd );
file:./SOURCE/ZoneMinder-1.28.0/src/zm_event.h::112	static bool OpenFrameSocket( int );
SOURCE/ZoneMinder-1.28.0/src/zm_event.h:113:	static bool ValidateFrameSocket( int );
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:21:#include <sys/socket.h>
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:215:bool Event::OpenFrameSocket( int monitor_id )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::222    sd = socket( AF_UNIX, SOCK_STREAM, 0);
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::225        Error( "Can't create socket: %s", strerror(errno) );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::229    int socket_buffer_size = config.frame_socket_size;
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::230    if ( socket_buffer_size > 0 )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::232        if ( setsockopt( sd, SOL_SOCKET, SO_SNDBUF, &socket_buffer_size, sizeof(socket_buffer_size) ) < 0 )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::234            Error( "Can't get socket buffer size to %d, error = %s", socket_buffer_size, strerror(errno) );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::244        Error( "Can't get socket flags, error = %s", strerror(errno) );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::252        Error( "Can't set socket flags, error = %s", strerror(errno) );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::258    char sock_path[PATH_MAX] = "";
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::259    snprintf( sock_path, sizeof(sock_path), "%s/zmf-%d.sock", config.path_socks, monitor_id );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::261    struct sockaddr_un addr;
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::263    strncpy( addr.sun_path, sock_path, sizeof(addr.sun_path) );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::266    if ( connect( sd, (struct sockaddr *)&addr, strlen(addr.sun_path)+sizeof(addr.sun_family)) < 0 )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::278bool Event::ValidateFrameSocket( int monitor_id )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::282        return( OpenFrameSocket( monitor_id ) );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::289    if ( !ValidateFrameSocket( monitor->Id() ) )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp::1115    if ( sendto( sd, &status_msg, sizeof(status_msg), MSG_DONTWAIT, (sockaddr *)&rem_addr, sizeof(rem_addr) ) < 0 )

file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::54        if ( mRtspSocket2.send( message.c_str(), message.size() ) != (int)message.length() )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::62        if ( mRtspSocket.send( message.c_str(), message.size() ) != (int)message.length() )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::101    if ( mRtspSocket.recv( response ) < 0 )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::248    if ( !mRtspSocket.connect( mHost.c_str(), strtol( mPort.c_str(), NULL, 10 ) ) )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::249        Fatal( "Unable to connect RTSP socket" );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::251    //select.addReader( &mRtspSocket );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::254        //mRtspSocket.recv( response );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::255        //Debug( 4, "Drained %d bytes from RTSP socket", response.size() );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::262        if ( !mRtspSocket2.connect( mHost.c_str(), strtol( mPort.c_str(), NULL, 10 ) ) )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::263            Fatal( "Unable to connect auxiliary RTSP/HTTP socket" );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::265        //select.addReader( &mRtspSocket2 );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::268            //mRtspSocket2.recv( response );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::269            //Debug( 4, "Drained %d bytes from HTTP socket", response.size() );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::285			if ( mRtspSocket.send( message.c_str(), message.size() ) != (int)message.length() )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::290			if ( mRtspSocket.recv( response ) < 0 )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::319				mRtspSocket.close();
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::320			    if ( !mRtspSocket.connect( mHost.c_str(), strtol( mPort.c_str(), NULL, 10 ) ) )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::321			        Fatal( "Unable to reconnect RTSP socket" );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::341        if ( mRtspSocket2.send( message.c_str(), message.size() ) != (int)message.length() )
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::629            select.addReader( &mRtspSocket );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::645                ssize_t nBytes = mRtspSocket.recv( tempBuffer, sizeof(tempBuffer) );
file:/SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp::647                Debug( 4, "Read %zd bytes on sd %d, %d total", nBytes, mRtspSocket.getReadDesc(), buffer.size() );

file:/SOURCE/ZoneMinder-1.28.0/src/zma.cpp::109			Event::OpenFrameSocket( monitor->Id() );

file:/SOURCE/ZoneMinder-1.28.0/src/zm_monitor.cpp::3748    if ( (nbytes = sendto( sd, &status_msg, sizeof(status_msg), MSG_DONTWAIT, (sockaddr *)&rem_addr, sizeof(rem_addr) )) < 0 )

file:/SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_rtsp.cpp::29#include <sys/socket.h>

SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:41:int OpenSocket( int monitor_id )
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:43:	int sd = socket( AF_UNIX, SOCK_STREAM, 0);
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:46:		Error( "Can't create socket: %s", strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:50:	char sock_path[PATH_MAX] = "";
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:51:	snprintf( sock_path, sizeof(sock_path), "%s/zmf-%d.sock", config.path_socks, monitor_id );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:52:	if ( unlink( sock_path ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:54:		Warning( "Can't unlink '%s': %s", sock_path, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:57:	struct sockaddr_un addr;
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:59:	strncpy( addr.sun_path, sock_path, sizeof(addr.sun_path) );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:62:	if ( bind( sd, (struct sockaddr *)&addr, strlen(addr.sun_path)+sizeof(addr.sun_family)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:74:	struct sockaddr_un rem_addr;
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:75:	socklen_t rem_addr_len = sizeof(rem_addr);
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:77:	if ( (new_sd = accept( sd, (struct sockaddr *)&rem_addr, &rem_addr_len )) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:86:	Info( "Frame server socket open, awaiting images" );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:90:int ReopenSocket( int &sd, int monitor_id )
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:93:	return( sd = OpenSocket( monitor_id ) );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:187:	int sd = OpenSocket( monitor->Id() );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:212:			ReopenSocket( sd, monitor->Id() );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:231:				Warning( "Socket closed at remote end" );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:233:			ReopenSocket( sd, monitor->Id() );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:274:				Warning( "Socket closed at remote end" );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:276:			ReopenSocket( sd, monitor->Id() );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.h:71:    TcpInetClient mRtspSocket;
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.h:72:    TcpInetClient mRtspSocket2;
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:25:#include <sys/socket.h>
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:95:        sd = socket( p->ai_family, p->ai_socktype, p->ai_protocol );
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:98:            Warning("Can't create socket: %s", strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:119:    Debug( 3, "Connected to host, socket = %d", sd );
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:182:            Debug( 3, "Socket closed" );
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:203:            Debug( 3, "Socket closed" );
Binary file SOURCE/ZoneMinder-1.28.0/src/libzm.a matches
Binary file SOURCE/ZoneMinder-1.28.0/src/zma matches
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera.cpp:71:	hints.ai_socktype = SOCK_STREAM;
SOURCE/ZoneMinder-1.28.0/scripts/zm:36:	#Make sure the folder for the socks file exists or create one
SOURCE/ZoneMinder-1.28.0/scripts/zm:37:	GetPath="select Value from Config where Name='ZM_PATH_SOCKS'"
SOURCE/ZoneMinder-1.28.0/scripts/zm:42:	    ZM_PATH_SOCK=`echo $GetPath | mysql -B -h$ZM_DB_HOST -u$ZM_DB_USER -p$ZM_DB_PASS $ZM_DB_NAME | grep -v '^Value'`
SOURCE/ZoneMinder-1.28.0/scripts/zm:44:	    ZM_PATH_SOCK=`echo $GetPath | mysql -B -h$dbHost -P$dbPort -u$ZM_DB_USER -p$ZM_DB_PASS $ZM_DB_NAME | grep -v '^Value'`
SOURCE/ZoneMinder-1.28.0/scripts/zm:46:	[ ! -d $ZM_PATH_SOCK ] \
SOURCE/ZoneMinder-1.28.0/scripts/zm:47:		&& mkdir -m 774 $ZM_PATH_SOCK \
SOURCE/ZoneMinder-1.28.0/scripts/zm:48:		&& chown $ZM_WEB_USER:$ZM_WEB_GROUP $ZM_PATH_SOCK
SOURCE/ZoneMinder-1.28.0/scripts/zmtrigger.pl.in:56:push( @connections, ZoneMinder::Trigger::Connection->new( name=>"Chan2", channel=>ZoneMinder::Trigger::Channel::Unix->new( path=>$Config{ZM_PATH_SOCKS}.'/zmtrigger.sock' ), mode=>"rw" ) );
SOURCE/ZoneMinder-1.28.0/scripts/zmtrigger.pl.in:67:#use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:50:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:54:use constant SOCK_FILE => $Config{ZM_PATH_SOCKS}.'/zmdc.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:131:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:133:my $saddr = sockaddr_un( SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:160:        socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:215:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:244:    socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:245:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:354:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:694:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:51:use constant SOCK_FILE => $Config{ZM_PATH_SOCKS}.'/zmx10.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:90:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:92:my $saddr = sockaddr_un( SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:105:		socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:151:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:166:	socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:167:	unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:168:	my $saddr = sockaddr_un( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmpkg.pl.in:173:        # Recreate the sock directory if it's been wiped
SOURCE/ZoneMinder-1.28.0/scripts/zmpkg.pl.in:174:	verifyFolder("@ZM_SOCKDIR@");
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:50:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:54:use constant SOCK_FILE => $Config{ZM_PATH_SOCKS}.'/zmdc.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:131:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:133:my $saddr = sockaddr_un( SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:160:        socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:215:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:244:    socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:245:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:354:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:694:    unlink( main::SOCK_FILE );

SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:609:		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:610:		default => "/zoneminder/sock",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:611:		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:612:		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:1243:		name => "ZM_FRAME_SOCKET_SIZE",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:1245:		description => "Specify the frame server socket buffer size if non-standard",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:1247:		help => "For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:1262:		description => "Interface external event triggers via socket or device files",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:609:		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:610:		default => "@ZM_SOCKDIR@",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:611:		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:612:		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:1243:		name => "ZM_FRAME_SOCKET_SIZE",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:1245:		description => "Specify the frame server socket buffer size if non-standard",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:1247:		help => "For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:1262:		description => "Interface external event triggers via socket or device files",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Unix.pm:22:# This module contains the class definition of the unix socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Unix.pm:40:# Unix socket based trigger channel
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Unix.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Unix.pm:65:	my $saddr = sockaddr_un( $self->{path} );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Unix.pm:66:	socket( *sfh, PF_UNIX, SOCK_STREAM, 0 ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Inet.pm:22:# This module contains the class definition of the tcp socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Inet.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Inet.pm:64:	my $saddr = sockaddr_in( $self->{port}, INADDR_ANY );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Inet.pm:65:	socket( *sfh, PF_INET, SOCK_STREAM, getprotobyname('tcp') ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Inet.pm:66:	setsockopt( *sfh, SOL_SOCKET, SO_REUSEADDR, 1 );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/PelcoD.pm:178:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/PelcoD.pm:179:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/PelcoP.pm:179:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/PelcoP.pm:180:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/Visca.pm:172:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/Visca.pm:173:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:609:		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:610:		default => "/zoneminder/sock",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:611:		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:612:		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:1243:		name => "ZM_FRAME_SOCKET_SIZE",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:1245:		description => "Specify the frame server socket buffer size if non-standard",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:1247:		help => "For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:1262:		description => "Interface external event triggers via socket or device files",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Unix.pm:22:# This module contains the class definition of the unix socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Unix.pm:40:# Unix socket based trigger channel
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Unix.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Unix.pm:65:	my $saddr = sockaddr_un( $self->{path} );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Unix.pm:66:	socket( *sfh, PF_UNIX, SOCK_STREAM, 0 ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Inet.pm:22:# This module contains the class definition of the tcp socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Inet.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Inet.pm:64:	my $saddr = sockaddr_in( $self->{port}, INADDR_ANY );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Inet.pm:65:	socket( *sfh, PF_INET, SOCK_STREAM, getprotobyname('tcp') ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Inet.pm:66:	setsockopt( *sfh, SOL_SOCKET, SO_REUSEADDR, 1 );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/PelcoD.pm:178:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/PelcoD.pm:179:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/PelcoP.pm:179:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/PelcoP.pm:180:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/Visca.pm:172:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/Visca.pm:173:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:609:		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:610:		default => "/zoneminder/sock",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:611:		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:612:		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:1243:		name => "ZM_FRAME_SOCKET_SIZE",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:1245:		description => "Specify the frame server socket buffer size if non-standard",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:1247:		help => "For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:1262:		description => "Interface external event triggers via socket or device files",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:609:		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:610:		default => "@ZM_SOCKDIR@",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:611:		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:612:		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:1243:		name => "ZM_FRAME_SOCKET_SIZE",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:1245:		description => "Specify the frame server socket buffer size if non-standard",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:1247:		help => "For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:1262:		description => "Interface external event triggers via socket or device files",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Unix.pm:22:# This module contains the class definition of the unix socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Unix.pm:40:# Unix socket based trigger channel
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Unix.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Unix.pm:65:	my $saddr = sockaddr_un( $self->{path} );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Unix.pm:66:	socket( *sfh, PF_UNIX, SOCK_STREAM, 0 ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Inet.pm:22:# This module contains the class definition of the tcp socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Inet.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Inet.pm:64:	my $saddr = sockaddr_in( $self->{port}, INADDR_ANY );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Inet.pm:65:	socket( *sfh, PF_INET, SOCK_STREAM, getprotobyname('tcp') ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Inet.pm:66:	setsockopt( *sfh, SOL_SOCKET, SO_REUSEADDR, 1 );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:34:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:91:my $sock_file = $Config{ZM_PATH_SOCKS}.'/zmcontrol-'.$id.'.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:93:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:95:my $saddr = sockaddr_un( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:137:        socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or die( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:167:        socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:168:        unlink( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:219:        unlink( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zmpkg.pl:173:        # Recreate the sock directory if it's been wiped
SOURCE/ZoneMinder-1.28.0/scripts/zmpkg.pl:174:	verifyFolder("/zoneminder/sock");
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:51:use constant SOCK_FILE => $Config{ZM_PATH_SOCKS}.'/zmx10.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:90:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:92:my $saddr = sockaddr_un( SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:105:		socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:151:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:166:	socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:167:	unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:168:	my $saddr = sockaddr_un( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:34:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:91:my $sock_file = $Config{ZM_PATH_SOCKS}.'/zmcontrol-'.$id.'.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:93:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:95:my $saddr = sockaddr_un( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:137:        socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or die( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:167:        socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:168:        unlink( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:219:        unlink( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:36:	#Make sure the folder for the socks file exists or create one
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:37:	GetPath="select Value from Config where Name='ZM_PATH_SOCKS'"
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:42:	    ZM_PATH_SOCK=`echo $GetPath | mysql -B -h$ZM_DB_HOST -u$ZM_DB_USER -p$ZM_DB_PASS $ZM_DB_NAME | grep -v '^Value'`
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:44:	    ZM_PATH_SOCK=`echo $GetPath | mysql -B -h$dbHost -P$dbPort -u$ZM_DB_USER -p$ZM_DB_PASS $ZM_DB_NAME | grep -v '^Value'`
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:46:	[ ! -d $ZM_PATH_SOCK ] \
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:47:		&& mkdir -m 774 $ZM_PATH_SOCK \
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:48:		&& chown $ZM_WEB_USER:$ZM_WEB_GROUP $ZM_PATH_SOCK
SOURCE/ZoneMinder-1.28.0/scripts/zmtrigger.pl:56:push( @connections, ZoneMinder::Trigger::Connection->new( name=>"Chan2", channel=>ZoneMinder::Trigger::Channel::Unix->new( path=>$Config{ZM_PATH_SOCKS}.'/zmtrigger.sock' ), mode=>"rw" ) );
SOURCE/ZoneMinder-1.28.0/scripts/zmtrigger.pl:67:#use Socket;
SOURCE/ZoneMinder-1.28.0/install_manifest.txt:479:/srv/http/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php
SOURCE/ZoneMinder-1.28.0/install_manifest.txt:483:/srv/http/api/lib/Cake/Test/Case/Network/CakeSocketTest.php
SOURCE/ZoneMinder-1.28.0/install_manifest.txt:1179:/srv/http/api/lib/Cake/Network/Http/HttpSocketResponse.php
SOURCE/ZoneMinder-1.28.0/install_manifest.txt:1181:/srv/http/api/lib/Cake/Network/Http/HttpSocket.php
SOURCE/ZoneMinder-1.28.0/install_manifest.txt:1185:/srv/http/api/lib/Cake/Network/CakeSocket.php
SOURCE/ZoneMinder-1.28.0/configure.ac:46:AC_ARG_VAR(ZM_SOCKDIR,[Location of Unix domain socket files, default /var/run/zm])
SOURCE/ZoneMinder-1.28.0/configure.ac:74:if test "$ZM_SOCKDIR" == ""; then
SOURCE/ZoneMinder-1.28.0/configure.ac:75:	AC_SUBST(ZM_SOCKDIR,[/var/run/zm])
SOURCE/ZoneMinder-1.28.0/configure.ac:293:AC_CHECK_FUNCS([gethostbyname gethostname gettimeofday memmove memset mkdir munmap posix_memalign putenv select sendfile socket sqrt strcasecmp strchr strcspn strerror strncasecmp strrchr strspn strstr strtol strtoull])
SOURCE/ZoneMinder-1.28.0/configure.ac:294:AC_CHECK_FUNCS([syscall sleep usleep ioctl ioctlsocket sigaction])
SOURCE/ZoneMinder-1.28.0/configure.ac:347:AC_CHECK_HEADERS([netdb.h netinet/in.h arpa/inet.h sys/ioctl.h sys/socket.h sys/un.h glob.h sys/sendfile.h])
SOURCE/ZoneMinder-1.28.0/srv.installed:384:/srv/http/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php
SOURCE/ZoneMinder-1.28.0/srv.installed:388:/srv/http/api/lib/Cake/Test/Case/Network/CakeSocketTest.php
SOURCE/ZoneMinder-1.28.0/srv.installed:1084:/srv/http/api/lib/Cake/Network/Http/HttpSocketResponse.php
SOURCE/ZoneMinder-1.28.0/srv.installed:1086:/srv/http/api/lib/Cake/Network/Http/HttpSocket.php
SOURCE/ZoneMinder-1.28.0/srv.installed:1090:/srv/http/api/lib/Cake/Network/CakeSocket.php

file:./SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php::804    'FRAME_SOCKET_SIZE' => array(
file:./SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php::806        'Help' => "Pentru imaginile de dimensiuni mari capturate este posibil ca scrierea lor pe disc s&#259; e&#351;ueze deoarece cantitatea de informa&#355;ie scris&#259; este mai mare dec&#226;t memoria tampon alocat&#259;. De&#351;i imaginile sunt scrise apoi de c&#259;tre daemon-ul de analiz&#259;, se distruge obiectul daemon-ului de cadre. Pute&#355;i folosi aceast&#259; op&#355;iune pentru a specifica o memorie tampon de dimensiuni mai mari. Va trebui sa modifica&#355;i dimensiunea socket-ului tampon maxim folosind 'sysctl' (sau in /proc/sys/net/core/wmem_max) pentru a permite setarea acestei noi valori. Alternativa este s&#259; schimba&#355;i m&#259;rimea implicit&#259; a memorie tampon a sistemului, caz &#238;n care modificarea acestei valori nu mai este necesar&#259;."
file:./SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php::835    'PATH_SOCKS' => array(
file:./SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php::836        'Prompt' => "Calea socket-urilor Unix care sunt folosite de ZoneMinder ",
file:./SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php::837        'Help' => "&#206;n general ZoneMinder folose&#351;te socket-urilor Unix. Astfel se reduce nevoia de a asigna porturi &#351;i &#238;mpiedic&#259; eventualele conflicte cu aplica&#355;ii externe. Fiecare socket Unix necesit&#259; un fi&#351;ier cu extensia .sock. Aceast&#259; op&#355;iune indic&#259; unde vor fi stocare fi&#351;ierele .sock."
file:./SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php::1156        'Prompt' => "Interac&#355;ioneaz&#259; cu declan&#351;atoare externe via socket sau fi&#351;ierele dispozitivelor",
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::16        $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::17        if ( !$socket )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::18            ajaxError( "socket_create() failed: ".socket_strerror(socket_last_error()) );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::20        $sock_file = ZM_PATH_SOCKS.'/zmcontrol-'.$monitor['Id'].'.sock';
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::21        if ( @socket_connect( $socket, $sock_file ) )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::32            if ( !socket_write( $socket, $option_string ) )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::33                ajaxError( "socket_write() failed: ".socket_strerror(socket_last_error()) );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::34            ajaxResponse( 'Used socket' );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::35            //socket_close( $socket );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::60    global $socket;
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::61    if ( !empty( $socket ) )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/control.php::62        @socket_close( $socket );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::11 if ( !($socket = @socket_create( AF_UNIX, SOCK_DGRAM, 0 )) )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::13    ajaxError( "socket_create() failed: ".socket_strerror(socket_last_error()) );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::15 $locSockFile = ZM_PATH_SOCKS.'/zms-'.sprintf("%06d",$_REQUEST['connkey']).'w.sock';
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::16 if ( !@socket_bind( $socket, $locSockFile ) )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::18    ajaxError( "socket_bind( $locSockFile ) failed: ".socket_strerror(socket_last_error()) );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::48 $remSockFile = ZM_PATH_SOCKS.'/zms-'.sprintf("%06d",$_REQUEST['connkey']).'s.sock';
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::49 $max_socket_tries = 10;
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::50 while ( !file_exists($remSockFile) && $max_socket_tries-- ) //sometimes we are too fast for our own good, if it hasn't been setup yet give it a second.
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::53 if ( !@socket_sendto( $socket, $msg, strlen($msg), 0, $remSockFile ) )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::55    ajaxError( "socket_sendto( $remSockFile ) failed: ".socket_strerror(socket_last_error()) );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::58 $rSockets = array( $socket );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::59 $wSockets = NULL;
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::60 $eSockets = NULL;
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::61 $numSockets = @socket_select( $rSockets, $wSockets, $eSockets, intval(MSG_TIMEOUT/1000), (MSG_TIMEOUT%1000)*1000 );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::63 if ( $numSockets === false )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::65    ajaxError( "socket_select failed: ".socket_strerror(socket_last_error()) );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::67else if ( $numSockets < 0 )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::69    ajaxError( "Socket closed $remSockFile"  );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::71else if ( $numSockets == 0 )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::73    ajaxError( "Timed out waiting for msg $remSockFile"  );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::75else if ( $numSockets > 0 )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::77    if ( count($rSockets) != 1 )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::78        ajaxError( "Bogus return from select, ".count($rSockets)." sockets available" );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::81switch( $nbytes = @socket_recvfrom( $socket, $msg, MSG_DATA_SIZE, 0, $remSockFile ) )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::85        ajaxError( "socket_recvfrom( $remSockFile ) failed: ".socket_strerror(socket_last_error()) );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::90        ajaxError( "No data to read from socket" );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::133    global $socket, $locSockFile;
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::134    if ( !empty( $socket ) )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::135        @socket_close( $socket );
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::136    if ( !empty( $locSockFile ) )
file:./SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php::137        @unlink( $locSockFile );
file:./SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php::38 * the host you connect to the database. To add a socket or port number, use 'port' => #
file:./SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php::53 * unix_socket =>
file:./SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php::54 * For MySQL to connect via socket specify the `unix_socket` parameter instead of `host` and `port`
file:./SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php.default::38 * the host you connect to the database. To add a socket or port number, use 'port' => #
file:./SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php.default::53 * unix_socket =>
file:./SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php.default::54 * For MySQL to connect via socket specify the `unix_socket` parameter instead of `host` and `port`
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2082:        $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2083:        if ( $socket < 0 )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2085:            Fatal( "socket_create() failed: ".socket_strerror($socket) );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2087:        $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2088:        if ( @socket_connect( $socket, $sock_file ) )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2091:            if ( !socket_write( $socket, $command ) )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2093:                Fatal( "Can't write to control socket: ".socket_strerror(socket_last_error($socket)) );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2095:            socket_shutdown( $socket, 1 );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2097:            while ( $x10Response = socket_read( $socket, 256 ) )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2101:            socket_close( $socket );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2134:    $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2135:    if ( $socket < 0 )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2137:        Fatal( "socket_create() failed: ".socket_strerror($socket) );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2139:    $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2140:    if ( @socket_connect( $socket, $sock_file ) )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2143:        if ( !socket_write( $socket, $command ) )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2145:            Fatal( "Can't write to control socket: ".socket_strerror(socket_last_error($socket)) );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2147:        socket_shutdown( $socket, 1 );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2148:        $x10Response = socket_read( $socket, 256 );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2149:        socket_close( $socket );
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:181:                $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:182:                if ( $socket < 0 )
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:184:                    Fatal( "socket_create() failed: ".socket_strerror($socket) );
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:186:                $sockFile = ZM_PATH_SOCKS.'/zmcontrol-'.$monitor['Id'].'.sock';
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:187:                if ( @socket_connect( $socket, $sockFile ) )
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:198:                    if ( !socket_write( $socket, $optionString ) )
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:200:                        Fatal( "Can't write to control socket: ".socket_strerror(socket_last_error($socket)) );
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:202:                    socket_close( $socket );

* ALL
SOURCE/ZoneMinder-1.28.0/CMakeLists.txt:49:set(ZM_SOCKDIR "/var/run/zm" CACHE PATH "Location of Unix domain socket files, default /var/run/zm")
SOURCE/ZoneMinder-1.28.0/CMakeLists.txt:76:	set(ZM_SOCKDIR "/var/lib/zoneminder/sock")
SOURCE/ZoneMinder-1.28.0/distros/opensuse/CMakeLists.txt:22:file(MAKE_DIRECTORY sock swap zoneminder zoneminder-upload events images temp)
SOURCE/ZoneMinder-1.28.0/distros/opensuse/CMakeLists.txt:26:#install(DIRECTORY sock swap DESTINATION /var/lib/zoneminder DIRECTORY_PERMISSIONS OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
SOURCE/ZoneMinder-1.28.0/distros/opensuse/README.OpenSuse:164:     	where name = 'ZM_PATH_SOCKS';
SOURCE/ZoneMinder-1.28.0/distros/opensuse/README.OpenSuse:166:     	where name = 'ZM_PATH_SOCKS';
SOURCE/ZoneMinder-1.28.0/distros/opensuse/zoneminder.cmake.OS13.spec:304:- Move default location of sockets, swaps, logfiles and some temporary files to
SOURCE/ZoneMinder-1.28.0/distros/fedora/CMakeLists.txt:14:file(MAKE_DIRECTORY sock swap zoneminder zoneminder-upload events images temp)
SOURCE/ZoneMinder-1.28.0/distros/fedora/CMakeLists.txt:18:install(DIRECTORY sock swap DESTINATION /var/lib/zoneminder DIRECTORY_PERMISSIONS OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
SOURCE/ZoneMinder-1.28.0/distros/fedora/zoneminder.cmake.f20.spec:168:%dir %attr(755,%{zmuid_final},%{zmgid_final}) /var/lib/zoneminder/sock
SOURCE/ZoneMinder-1.28.0/distros/fedora/zoneminder.cmake.f20.spec:304:- Move default location of sockets, swaps, logfiles and some temporary files to
SOURCE/ZoneMinder-1.28.0/distros/fedora/archive/zoneminder.cmake.f19.spec:171:%dir %attr(755,%{zmuid_final},%{zmgid_final}) /var/lib/zoneminder/sock
SOURCE/ZoneMinder-1.28.0/distros/fedora/archive/zoneminder.cmake.f19.spec:304:- Move default location of sockets, swaps, logfiles and some temporary files to
SOURCE/ZoneMinder-1.28.0/distros/fedora/archive/zoneminder.f19.spec:147:install -m 755 -d %{buildroot}/var/lib/zoneminder/sock
SOURCE/ZoneMinder-1.28.0/distros/fedora/archive/zoneminder.f19.spec:260:%dir %attr(755,%{zmuid_final},%{zmgid_final}) /var/lib/zoneminder/sock
SOURCE/ZoneMinder-1.28.0/distros/fedora/archive/zoneminder.f19.spec:387:- Move default location of sockets, swaps, logfiles and some temporary files to
SOURCE/ZoneMinder-1.28.0/distros/fedora/archive/zoneminder-1.26.0-defaults.patch:44: 		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/distros/fedora/archive/zoneminder-1.26.0-defaults.patch:46:+		default => "/var/lib/zoneminder/sock",
SOURCE/ZoneMinder-1.28.0/distros/fedora/archive/zoneminder-1.26.0-defaults.patch:47: 		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/distros/fedora/archive/zoneminder-1.26.0-defaults.patch:48: 		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/distros/redhat/CMakeLists.txt:28:file(MAKE_DIRECTORY sock swap zoneminder zoneminder-upload events images temp)
SOURCE/ZoneMinder-1.28.0/distros/redhat/CMakeLists.txt:32:install(DIRECTORY sock swap DESTINATION /var/lib/zoneminder DIRECTORY_PERMISSIONS OWNER_WRITE OWNER_READ OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:53:	class sock_file { write create unlink };
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:54:	class unix_stream_socket { read connectto };
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:57:        class udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:80:allow httpd_t initrc_t:unix_stream_socket connectto;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:93:allow httpd_t tmpfs_t:sock_file write;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:100:allow httpd_t afs_fs_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:101:allow httpd_t afs_ka_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:102:allow httpd_t afs_pt_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:103:allow httpd_t amqp_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:104:allow httpd_t aol_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:105:allow httpd_t commplex_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:106:allow httpd_t condor_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:107:allow httpd_t dcc_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:108:allow httpd_t git_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:109:allow httpd_t glance_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:111:allow httpd_t ionixnetmon_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:112:allow httpd_t ipp_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:113:allow httpd_t mmcc_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:114:allow httpd_t netsupport_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:115:allow httpd_t nodejs_debug_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:116:allow httpd_t port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/local_zoneminder.te:123:allow httpd_t presence_port_t:udp_socket name_bind;
SOURCE/ZoneMinder-1.28.0/distros/redhat/zoneminder.cmake.el6.spec:157:%dir %attr(755,%{zmuid_final},%{zmgid_final}) %{_localstatedir}/lib/zoneminder/sock
SOURCE/ZoneMinder-1.28.0/distros/redhat/zoneminder.cmake.el6.spec:238:- Move default location of sockets, swaps, logfiles and some temporary files to
SOURCE/ZoneMinder-1.28.0/distros/redhat/zoneminder.in:36:	#Make sure the folder for the socks file exists or create one
SOURCE/ZoneMinder-1.28.0/distros/redhat/zoneminder.in:37:	GetPath="select Value from Config where Name='ZM_PATH_SOCKS'"
SOURCE/ZoneMinder-1.28.0/distros/redhat/zoneminder.in:42:	    ZM_PATH_SOCK=`echo $GetPath | mysql -B -h$ZM_DB_HOST -u$ZM_DB_USER -p$ZM_DB_PASS $ZM_DB_NAME | grep -v '^Value'`
SOURCE/ZoneMinder-1.28.0/distros/redhat/zoneminder.in:44:	    ZM_PATH_SOCK=`echo $GetPath | mysql -B -h$dbHost -P$dbPort -u$ZM_DB_USER -p$ZM_DB_PASS $ZM_DB_NAME | grep -v '^Value'`
SOURCE/ZoneMinder-1.28.0/distros/redhat/zoneminder.in:46:	[ ! -d $ZM_PATH_SOCK ] \
SOURCE/ZoneMinder-1.28.0/distros/redhat/zoneminder.in:47:		&& mkdir -m 774 $ZM_PATH_SOCK \
SOURCE/ZoneMinder-1.28.0/distros/redhat/zoneminder.in:48:		&& chown $ZM_WEB_USER:$ZM_WEB_GROUP $ZM_PATH_SOCK
SOURCE/ZoneMinder-1.28.0/distros/redhat/archive/zoneminder.el6.spec:164:install -m 755 -d %{buildroot}/%{_localstatedir}/lib/zoneminder/sock
SOURCE/ZoneMinder-1.28.0/distros/redhat/archive/zoneminder.el6.spec:265:%dir %attr(755,%{zmuid_final},%{zmgid_final}) %{_localstatedir}/lib/zoneminder/sock
SOURCE/ZoneMinder-1.28.0/distros/redhat/archive/zoneminder.el6.spec:335:- Move default location of sockets, swaps, logfiles and some temporary files to
SOURCE/ZoneMinder-1.28.0/distros/redhat/archive/zoneminder-1.26.0-defaults.patch:44: 		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/distros/redhat/archive/zoneminder-1.26.0-defaults.patch:46:+		default => "/var/lib/zoneminder/sock",
SOURCE/ZoneMinder-1.28.0/distros/redhat/archive/zoneminder-1.26.0-defaults.patch:47: 		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/distros/redhat/archive/zoneminder-1.26.0-defaults.patch:48: 		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zmf.dir/CXX.includecache:272:sys/socket.h
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zmf.dir/CXX.includecache:320:sys/socket.h
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zmf.dir/zmf.cpp.o matches
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/CXX.includecache:194:sys/socket.h
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/CXX.includecache:698:sys/socket.h
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/CXX.includecache:710:sys/socket.h
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/CXX.includecache:738:sys/socket.h
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/CXX.includecache:948:sys/socket.h
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_zone.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_rtsp.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_comms.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_signal.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_camera.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_jpeg.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_sdp.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_thread.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_db.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_logger.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_rtsp_auth.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_rtp_source.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_utils.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_mpeg.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_remote_camera.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_config.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_local_camera.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_regexp.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_timer.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_libvlc_camera.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_ffmpeg_camera.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_curl_camera.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_remote_camera_http.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_rtp_data.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_file_camera.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_user.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_image.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_remote_camera_rtsp.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_stream.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_event.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_rtp_ctrl.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_ffmpeg.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zm.dir/zm_monitor.cpp.o matches
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zmu.dir/CXX.includecache:286:sys/socket.h
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zmu.dir/zmu.cpp.o matches
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zms.dir/CXX.includecache:272:sys/socket.h
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zms.dir/zms.cpp.o matches
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/nph-zms.dir/CXX.includecache:272:sys/socket.h
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/nph-zms.dir/zms.cpp.o matches
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zmstreamer.dir/CXX.includecache:272:sys/socket.h
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zmstreamer.dir/zmstreamer.cpp.o matches
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zma.dir/CXX.includecache:272:sys/socket.h
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zma.dir/zma.cpp.o matches
SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zmc.dir/CXX.includecache:272:sys/socket.h
Binary file SOURCE/ZoneMinder-1.28.0/src/CMakeFiles/zmc.dir/zmc.cpp.o matches
Binary file SOURCE/ZoneMinder-1.28.0/src/zmu matches
Binary file SOURCE/ZoneMinder-1.28.0/src/zmstreamer matches
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_ctrl.cpp:271:    SockAddrInet localAddr, remoteAddr;
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_ctrl.cpp:274:    UdpInetSocket rtpCtrlServer;
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_ctrl.cpp:312:            if ( UdpInetSocket *socket = dynamic_cast<UdpInetSocket *>(*iter) )
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_ctrl.cpp:314:                ssize_t nBytes = socket->recv( buffer, sizeof(buffer) );
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_ctrl.cpp:315:                Debug( 4, "Read %zd bytes on sd %d", nBytes, socket->getReadDesc() );
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_rtsp.h:38:	struct sockaddr_in rtsp_sa;
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_rtsp.h:39:	struct sockaddr_in rtcp_sa;
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.h:39:	//struct sockaddr_in sa;
Binary file SOURCE/ZoneMinder-1.28.0/src/zmc matches
SOURCE/ZoneMinder-1.28.0/src/zm_stream.cpp:289:        sd = socket( AF_UNIX, SOCK_DGRAM, 0 );
SOURCE/ZoneMinder-1.28.0/src/zm_stream.cpp:292:            Fatal( "Can't create socket: %s", strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_stream.cpp:295:        snprintf( loc_sock_path, sizeof(loc_sock_path), "%s/zms-%06ds.sock", config.path_socks, connkey );
SOURCE/ZoneMinder-1.28.0/src/zm_stream.cpp:296:        unlink( loc_sock_path );
SOURCE/ZoneMinder-1.28.0/src/zm_stream.cpp:298:        strncpy( loc_addr.sun_path, loc_sock_path, sizeof(loc_addr.sun_path) );
SOURCE/ZoneMinder-1.28.0/src/zm_stream.cpp:300:        if ( bind( sd, (struct sockaddr *)&loc_addr, strlen(loc_addr.sun_path)+sizeof(loc_addr.sun_family)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_stream.cpp:305:        snprintf( rem_sock_path, sizeof(rem_sock_path), "%s/zms-%06dw.sock", config.path_socks, connkey );
SOURCE/ZoneMinder-1.28.0/src/zm_stream.cpp:306:        strncpy( rem_addr.sun_path, rem_sock_path, sizeof(rem_addr.sun_path) );
SOURCE/ZoneMinder-1.28.0/src/zm_stream.cpp:320:        if ( loc_sock_path[0] )
SOURCE/ZoneMinder-1.28.0/src/zm_stream.cpp:322:            unlink( loc_sock_path );
Binary file SOURCE/ZoneMinder-1.28.0/src/nph-zms matches
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:68:    SockAddrInet localAddr;
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:69:    UdpInetServer rtpDataSocket;
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:74:    if ( !rtpDataSocket.bind( localAddr ) )
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:79:    select.addReader( &rtpDataSocket );
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:95:             if ( UdpInetServer *socket = dynamic_cast<UdpInetServer *>(*iter) )
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:97:                 int nBytes = socket->recv( buffer, sizeof(buffer) );
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:98:                 Debug( 4, "Got %d bytes on sd %d", nBytes, socket->getReadDesc() );
SOURCE/ZoneMinder-1.28.0/src/zm_rtp_data.cpp:115:    rtpDataSocket.close();
SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:66:#define ZM_PATH_SOCKS 62
SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:136:#define ZM_FRAME_SOCKET_SIZE 132
SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:286:	const char *path_socks;\
SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:356:	int frame_socket_size;\
SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:504:	path_socks = (const char *)config.Item( ZM_PATH_SOCKS );\
SOURCE/ZoneMinder-1.28.0/src/zm_config_defines.h:574:	frame_socket_size = (int)config.Item( ZM_FRAME_SOCKET_SIZE );\
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:33://#include <sys/socket.h>
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:124:SockAddr::SockAddr( const struct sockaddr *addr ) : mAddr( addr )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:128:SockAddr *SockAddr::newSockAddr( const struct sockaddr &addr, socklen_t len )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:130:    if ( addr.sa_family == AF_INET && len == SockAddrInet::addrSize() )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:132:        return( new SockAddrInet( (const struct sockaddr_in *)&addr ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:134:    else if ( addr.sa_family == AF_UNIX && len == SockAddrUnix::addrSize() )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:136:        return( new SockAddrUnix( (const struct sockaddr_un *)&addr ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:138:    Error( "Unable to create new SockAddr from addr family %d with size %d", addr.sa_family, len );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:142:SockAddr *SockAddr::newSockAddr( const SockAddr *addr )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:149:        return( new SockAddrInet( *(SockAddrInet *)addr ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:153:        return( new SockAddrUnix( *(SockAddrUnix *)addr ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:155:    Error( "Unable to create new SockAddr from addr family %d", addr->getDomain() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:159:SockAddrInet::SockAddrInet() : SockAddr( (struct sockaddr *)&mAddrIn )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:163:bool SockAddrInet::resolve( const char *host, const char *serv, const char *proto )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:188:bool SockAddrInet::resolve( const char *host, int port, const char *proto )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:205:bool SockAddrInet::resolve( const char *serv, const char *proto )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:223:bool SockAddrInet::resolve( int port, const char *proto )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:234:SockAddrUnix::SockAddrUnix() : SockAddr( (struct sockaddr *)&mAddrUn )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:238:bool SockAddrUnix::resolve( const char *path, const char *proto )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:248:bool Socket::socket()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:253:	if ( (mSd = ::socket( getDomain(), getType(), 0 ) ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:255:		Error( "socket(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:261:	(void)::setsockopt( mSd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:262:	(void)::setsockopt( mSd, SOL_SOCKET, SO_KEEPALIVE, &val, sizeof(val) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:269:bool Socket::connect()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:271:	if ( !socket() ) 
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:286:bool Socket::bind()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:288:	if ( !socket() )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:300:bool Socket::listen()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:314:bool Socket::accept()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:316:    struct sockaddr *rem_addr = mLocalAddr->getTempAddr();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:317:    socklen_t rem_addr_size = getAddrSize();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:335:bool Socket::accept( int &newSd )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:337:    struct sockaddr *rem_addr = mLocalAddr->getTempAddr();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:338:    socklen_t rem_addr_size = getAddrSize();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:351:bool Socket::close()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:359:int Socket::bytesToRead() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:371:bool Socket::getBlocking( bool &blocking )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:384:bool Socket::setBlocking( bool blocking )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:422:bool Socket::getSendBufferSize( int &buffersize ) const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:424:	socklen_t optlen = sizeof(buffersize);
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:425:	if ( getsockopt( mSd, SOL_SOCKET, SO_SNDBUF, &buffersize, &optlen ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:427:		Error( "getsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:433:bool Socket::getRecvBufferSize( int &buffersize ) const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:435:	socklen_t optlen = sizeof(buffersize);
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:436:	if ( getsockopt( mSd, SOL_SOCKET, SO_RCVBUF, &buffersize, &optlen ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:438:		Error( "getsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:444:bool Socket::setSendBufferSize( int buffersize )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:446:	if ( setsockopt( mSd, SOL_SOCKET, SO_SNDBUF, (char *)&buffersize, sizeof(buffersize)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:448:		Error( "setsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:454:bool Socket::setRecvBufferSize( int buffersize )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:456:	if ( setsockopt( mSd, SOL_SOCKET, SO_RCVBUF, (char *)&buffersize, sizeof(buffersize)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:458:		Error( "setsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:464:bool Socket::getRouting( bool &route ) const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:467:	socklen_t optlen = sizeof(dontRoute);
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:468:	if ( getsockopt( mSd, SOL_SOCKET, SO_DONTROUTE, &dontRoute, &optlen ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:470:		Error( "getsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:477:bool Socket::setRouting( bool route )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:480:	if ( setsockopt( mSd, SOL_SOCKET, SO_DONTROUTE, (char *)&dontRoute, sizeof(dontRoute)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:482:		Error( "setsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:488:bool Socket::getNoDelay( bool &nodelay ) const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:491:	socklen_t optlen = sizeof(int_nodelay);
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:492:	if ( getsockopt( mSd, IPPROTO_TCP, TCP_NODELAY, &int_nodelay, &optlen ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:494:		Error( "getsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:501:bool Socket::setNoDelay( bool nodelay )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:505:	if ( setsockopt( mSd, IPPROTO_TCP, TCP_NODELAY, (char *)&int_nodelay, sizeof(int_nodelay)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:507:		Error( "setsockopt(), errno = %d, error = %s", errno, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:515:    return( Socket::listen() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:520:    return( Socket::accept() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:523:bool TcpInetServer::accept( TcpInetSocket *&newSocket )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:526:    newSocket = 0;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:528:    if ( !Socket::accept( newSd ) )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:531:	newSocket = new TcpInetSocket( *this, newSd );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:536:bool TcpUnixServer::accept( TcpUnixSocket *&newSocket )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:539:    newSocket = 0;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:541:    if ( !Socket::accept( newSd ) )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.cpp:544:	newSocket = new TcpUnixSocket( *this, newSd );
SOURCE/ZoneMinder-1.28.0/src/zm_event.h:112:	static bool OpenFrameSocket( int );
SOURCE/ZoneMinder-1.28.0/src/zm_event.h:113:	static bool ValidateFrameSocket( int );
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:21:#include <sys/socket.h>
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:215:bool Event::OpenFrameSocket( int monitor_id )
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:222:    sd = socket( AF_UNIX, SOCK_STREAM, 0);
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:225:        Error( "Can't create socket: %s", strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:229:    int socket_buffer_size = config.frame_socket_size;
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:230:    if ( socket_buffer_size > 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:232:        if ( setsockopt( sd, SOL_SOCKET, SO_SNDBUF, &socket_buffer_size, sizeof(socket_buffer_size) ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:234:            Error( "Can't get socket buffer size to %d, error = %s", socket_buffer_size, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:244:        Error( "Can't get socket flags, error = %s", strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:252:        Error( "Can't set socket flags, error = %s", strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:258:    char sock_path[PATH_MAX] = "";
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:259:    snprintf( sock_path, sizeof(sock_path), "%s/zmf-%d.sock", config.path_socks, monitor_id );
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:261:    struct sockaddr_un addr;
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:263:    strncpy( addr.sun_path, sock_path, sizeof(addr.sun_path) );
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:266:    if ( connect( sd, (struct sockaddr *)&addr, strlen(addr.sun_path)+sizeof(addr.sun_family)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:278:bool Event::ValidateFrameSocket( int monitor_id )
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:282:        return( OpenFrameSocket( monitor_id ) );
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:289:    if ( !ValidateFrameSocket( monitor->Id() ) )
SOURCE/ZoneMinder-1.28.0/src/zm_event.cpp:1115:    if ( sendto( sd, &status_msg, sizeof(status_msg), MSG_DONTWAIT, (sockaddr *)&rem_addr, sizeof(rem_addr) ) < 0 )
Binary file SOURCE/ZoneMinder-1.28.0/src/zms matches
Binary file SOURCE/ZoneMinder-1.28.0/src/zmf matches
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:54:        if ( mRtspSocket2.send( message.c_str(), message.size() ) != (int)message.length() )
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:62:        if ( mRtspSocket.send( message.c_str(), message.size() ) != (int)message.length() )
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:101:    if ( mRtspSocket.recv( response ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:248:    if ( !mRtspSocket.connect( mHost.c_str(), strtol( mPort.c_str(), NULL, 10 ) ) )
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:249:        Fatal( "Unable to connect RTSP socket" );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:251:    //select.addReader( &mRtspSocket );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:254:        //mRtspSocket.recv( response );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:255:        //Debug( 4, "Drained %d bytes from RTSP socket", response.size() );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:262:        if ( !mRtspSocket2.connect( mHost.c_str(), strtol( mPort.c_str(), NULL, 10 ) ) )
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:263:            Fatal( "Unable to connect auxiliary RTSP/HTTP socket" );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:265:        //select.addReader( &mRtspSocket2 );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:268:            //mRtspSocket2.recv( response );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:269:            //Debug( 4, "Drained %d bytes from HTTP socket", response.size() );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:285:			if ( mRtspSocket.send( message.c_str(), message.size() ) != (int)message.length() )
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:290:			if ( mRtspSocket.recv( response ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:319:				mRtspSocket.close();
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:320:			    if ( !mRtspSocket.connect( mHost.c_str(), strtol( mPort.c_str(), NULL, 10 ) ) )
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:321:			        Fatal( "Unable to reconnect RTSP socket" );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:341:        if ( mRtspSocket2.send( message.c_str(), message.size() ) != (int)message.length() )
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:629:            select.addReader( &mRtspSocket );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:645:                ssize_t nBytes = mRtspSocket.recv( tempBuffer, sizeof(tempBuffer) );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.cpp:647:                Debug( 4, "Read %zd bytes on sd %d, %d total", nBytes, mRtspSocket.getReadDesc(), buffer.size() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:143:class SockAddr
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:146:    const struct sockaddr *mAddr;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:149:    SockAddr( const struct sockaddr *addr );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:150:    virtual ~SockAddr()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:154:    static SockAddr *newSockAddr( const struct sockaddr &addr, socklen_t len );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:155:    static SockAddr *newSockAddr( const SockAddr *addr );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:162:    const struct sockaddr *getAddr() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:166:    virtual socklen_t getAddrSize() const=0;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:167:    virtual struct sockaddr *getTempAddr() const=0;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:170:class SockAddrInet : public SockAddr
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:173:    struct sockaddr_in  mAddrIn;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:174:    struct sockaddr_in  mTempAddrIn;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:177:	SockAddrInet();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:178:	SockAddrInet( const SockAddrInet &addr ) : SockAddr( (const struct sockaddr *)&mAddrIn ), mAddrIn( addr.mAddrIn )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:181:	SockAddrInet( const struct sockaddr_in *addr ) : SockAddr( (const struct sockaddr *)&mAddrIn ), mAddrIn( *addr )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:191:    socklen_t getAddrSize() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:195:    struct sockaddr *getTempAddr() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:197:        return( (sockaddr *)&mTempAddrIn );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:201:    static socklen_t addrSize()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:203:        return( sizeof(sockaddr_in) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:207:class SockAddrUnix : public SockAddr
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:210:    struct sockaddr_un  mAddrUn;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:211:    struct sockaddr_un  mTempAddrUn;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:214:	SockAddrUnix();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:215:	SockAddrUnix( const SockAddrUnix &addr ) : SockAddr( (const struct sockaddr *)&mAddrUn ), mAddrUn( addr.mAddrUn )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:218:	SockAddrUnix( const struct sockaddr_un *addr ) : SockAddr( (const struct sockaddr *)&mAddrUn ), mAddrUn( *addr )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:224:    socklen_t getAddrSize() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:228:    struct sockaddr *getTempAddr() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:230:        return( (sockaddr *)&mTempAddrUn );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:234:    static socklen_t addrSize()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:236:        return( sizeof(sockaddr_un) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:240:class Socket : public CommsBase
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:248:    SockAddr *mLocalAddr;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:249:    SockAddr *mRemoteAddr;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:252:	Socket() : CommsBase( mSd, mSd ), mSd( -1 ), mState( CLOSED ), mLocalAddr( 0 ), mRemoteAddr( 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:255:	Socket( const Socket &socket, int newSd ) : CommsBase( mSd, mSd ), mSd( newSd ), mState( CONNECTED ), mLocalAddr( 0 ), mRemoteAddr( 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:257:        if ( socket.mLocalAddr )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:258:            mLocalAddr = SockAddr::newSockAddr( mLocalAddr );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:259:        if ( socket.mRemoteAddr )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:260:            mRemoteAddr = SockAddr::newSockAddr( mRemoteAddr );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:262:	virtual ~Socket()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:295:	virtual bool socket();
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:367:    const SockAddr *getLocalAddr() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:371:    const SockAddr *getRemoteAddr() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:375:    virtual socklen_t getAddrSize() const=0;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:393:class InetSocket : virtual public Socket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:400:    virtual socklen_t getAddrSize() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:402:        return( SockAddrInet::addrSize() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:408:        SockAddrInet *addr = new SockAddrInet;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:414:        SockAddrInet *addr = new SockAddrInet;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:420:        SockAddrInet *addr = new SockAddrInet;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:426:        SockAddrInet *addr = new SockAddrInet;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:433:        SockAddrInet *addr = new SockAddrInet;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:439:        SockAddrInet *addr = new SockAddrInet;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:445:    bool bind( const SockAddrInet &addr )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:447:        mLocalAddr = new SockAddrInet( addr );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:448:        return( Socket::bind() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:454:        return( Socket::bind() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:460:        return( Socket::bind() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:466:        return( Socket::bind() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:472:        return( Socket::bind() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:475:    bool connect( const SockAddrInet &addr )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:477:        mRemoteAddr = new SockAddrInet( addr );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:478:        return( Socket::connect() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:484:        return( Socket::connect() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:490:        return( Socket::connect() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:494:class UnixSocket : virtual public Socket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:501:    virtual socklen_t getAddrSize() const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:503:        return( SockAddrUnix::addrSize() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:509:        SockAddrUnix *addr = new SockAddrUnix;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:516:        SockAddrUnix *addr = new SockAddrUnix;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:524:        if ( !UnixSocket::resolveLocal( path, getProtocol() ) )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:526:        return( Socket::bind() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:531:        if ( !UnixSocket::resolveRemote( path, getProtocol() ) )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:533:        return( Socket::connect() );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:537:class UdpSocket : virtual public Socket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:542:        return( SOCK_DGRAM );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:550:	virtual int sendto( const void *msg, int len, const SockAddr *addr=0 ) const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:557:	virtual int recvfrom( void *msg, int len, SockAddr *addr=0 ) const
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:562:            struct sockaddr sockAddr;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:563:            socklen_t sockLen;
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:564:		    nBytes = ::recvfrom( mSd, msg, len, 0, &sockAddr, &sockLen );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:569:            else if ( sockLen )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:571:                addr = SockAddr::newSockAddr( sockAddr, sockLen );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:584:class UdpInetSocket : virtual public UdpSocket, virtual public InetSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:587:    bool bind( const SockAddrInet &addr ) 
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:589:        return( InetSocket::bind( addr ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:593:        return( InetSocket::bind( host, serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:597:        return( InetSocket::bind( host, port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:601:        return( InetSocket::bind( serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:605:        return( InetSocket::bind( port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:608:    bool connect( const SockAddrInet &addr ) 
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:610:        return( InetSocket::connect( addr ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:614:        return( InetSocket::connect( host, serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:618:        return( InetSocket::connect( host, port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:622:class UdpUnixSocket : virtual public UdpSocket, virtual public UnixSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:627:        return( UnixSocket::bind( path ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:632:        return( UnixSocket::connect( path ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:636:class UdpInetClient : public UdpInetSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:639:    bool bind( const SockAddrInet &addr ) 
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:641:        return( UdpInetSocket::bind( addr ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:645:        return( UdpInetSocket::bind( host, serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:649:        return( UdpInetSocket::bind( host, port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:653:        return( UdpInetSocket::bind( serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:657:        return( UdpInetSocket::bind( port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:661:    bool connect( const SockAddrInet &addr ) 
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:663:        return( UdpInetSocket::connect( addr ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:667:        return( UdpInetSocket::connect( host, serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:671:        return( UdpInetSocket::connect( host, port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:675:class UdpUnixClient : public UdpUnixSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:680:        return( UdpUnixSocket::bind( path ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:686:        return( UdpUnixSocket::connect( path) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:690:class UdpInetServer : public UdpInetSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:693:    bool bind( const SockAddrInet &addr ) 
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:695:        return( UdpInetSocket::bind( addr ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:699:        return( UdpInetSocket::bind( host, serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:703:        return( UdpInetSocket::bind( host, port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:707:        return( UdpInetSocket::bind( serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:711:        return( UdpInetSocket::bind( port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:717:        return( UdpInetSocket::connect( host, serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:721:        return( UdpInetSocket::connect( host, port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:725:class UdpUnixServer : public UdpUnixSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:730:        return( UdpUnixSocket::bind( path ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:736:        return( UdpUnixSocket::connect( path ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:740:class TcpSocket : virtual public Socket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:743:    TcpSocket()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:746:    TcpSocket( const TcpSocket &socket, int newSd ) : Socket( socket, newSd )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:753:        return( SOCK_STREAM );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:761:class TcpInetSocket : virtual public TcpSocket, virtual public InetSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:764:    TcpInetSocket()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:767:    TcpInetSocket( const TcpInetSocket &socket, int newSd ) : TcpSocket( socket, newSd )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:772:class TcpUnixSocket : virtual public TcpSocket, virtual public UnixSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:775:    TcpUnixSocket()
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:778:    TcpUnixSocket( const TcpUnixSocket &socket, int newSd ) : TcpSocket( socket, newSd )
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:783:class TcpInetClient : public TcpInetSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:788:        return( TcpInetSocket::connect( host, serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:792:        return( TcpInetSocket::connect( host, port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:796:class TcpUnixClient : public TcpUnixSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:801:        return( TcpUnixSocket::connect( path) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:805:class TcpInetServer : public TcpInetSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:810:        return( TcpInetSocket::bind( host, serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:814:        return( TcpInetSocket::bind( host, port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:818:        return( TcpInetSocket::bind( serv ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:822:        return( TcpInetSocket::bind( port ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:826:    bool isListening() const { return( Socket::isListening() ); }
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:829:    bool accept( TcpInetSocket *&newSocket );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:832:class TcpUnixServer : public TcpUnixSocket
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:837:        return( TcpUnixSocket::bind( path ) );
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:841:    bool isListening() const { return( Socket::isListening() ); }
SOURCE/ZoneMinder-1.28.0/src/zm_comms.h:844:    bool accept( TcpUnixSocket *&newSocket );
SOURCE/ZoneMinder-1.28.0/src/zma.cpp:109:			Event::OpenFrameSocket( monitor->Id() );
SOURCE/ZoneMinder-1.28.0/src/zm_stream.h:24:#include <sys/socket.h>
SOURCE/ZoneMinder-1.28.0/src/zm_stream.h:77:	char loc_sock_path[PATH_MAX];
SOURCE/ZoneMinder-1.28.0/src/zm_stream.h:78:    struct sockaddr_un loc_addr;
SOURCE/ZoneMinder-1.28.0/src/zm_stream.h:79:	char rem_sock_path[PATH_MAX];
SOURCE/ZoneMinder-1.28.0/src/zm_stream.h:80:    struct sockaddr_un rem_addr;
SOURCE/ZoneMinder-1.28.0/src/zm_stream.h:130:        memset( &loc_sock_path, 0, sizeof(loc_sock_path) );
SOURCE/ZoneMinder-1.28.0/src/zm_stream.h:132:        memset( &rem_sock_path, 0, sizeof(rem_sock_path) );
SOURCE/ZoneMinder-1.28.0/src/zm_monitor.cpp:3748:    if ( (nbytes = sendto( sd, &status_msg, sizeof(status_msg), MSG_DONTWAIT, (sockaddr *)&rem_addr, sizeof(rem_addr) )) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera.h:27:#include <sys/socket.h>
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_rtsp.cpp:29:#include <sys/socket.h>
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:29:#include <sys/socket.h>
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:41:int OpenSocket( int monitor_id )
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:43:	int sd = socket( AF_UNIX, SOCK_STREAM, 0);
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:46:		Error( "Can't create socket: %s", strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:50:	char sock_path[PATH_MAX] = "";
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:51:	snprintf( sock_path, sizeof(sock_path), "%s/zmf-%d.sock", config.path_socks, monitor_id );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:52:	if ( unlink( sock_path ) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:54:		Warning( "Can't unlink '%s': %s", sock_path, strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:57:	struct sockaddr_un addr;
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:59:	strncpy( addr.sun_path, sock_path, sizeof(addr.sun_path) );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:62:	if ( bind( sd, (struct sockaddr *)&addr, strlen(addr.sun_path)+sizeof(addr.sun_family)) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:74:	struct sockaddr_un rem_addr;
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:75:	socklen_t rem_addr_len = sizeof(rem_addr);
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:77:	if ( (new_sd = accept( sd, (struct sockaddr *)&rem_addr, &rem_addr_len )) < 0 )
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:86:	Info( "Frame server socket open, awaiting images" );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:90:int ReopenSocket( int &sd, int monitor_id )
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:93:	return( sd = OpenSocket( monitor_id ) );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:187:	int sd = OpenSocket( monitor->Id() );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:212:			ReopenSocket( sd, monitor->Id() );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:231:				Warning( "Socket closed at remote end" );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:233:			ReopenSocket( sd, monitor->Id() );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:274:				Warning( "Socket closed at remote end" );
SOURCE/ZoneMinder-1.28.0/src/zmf.cpp:276:			ReopenSocket( sd, monitor->Id() );
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.h:71:    TcpInetClient mRtspSocket;
SOURCE/ZoneMinder-1.28.0/src/zm_rtsp.h:72:    TcpInetClient mRtspSocket2;
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:25:#include <sys/socket.h>
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:95:        sd = socket( p->ai_family, p->ai_socktype, p->ai_protocol );
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:98:            Warning("Can't create socket: %s", strerror(errno) );
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:119:    Debug( 3, "Connected to host, socket = %d", sd );
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:182:            Debug( 3, "Socket closed" );
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera_http.cpp:203:            Debug( 3, "Socket closed" );
Binary file SOURCE/ZoneMinder-1.28.0/src/libzm.a matches
Binary file SOURCE/ZoneMinder-1.28.0/src/zma matches
SOURCE/ZoneMinder-1.28.0/src/zm_remote_camera.cpp:71:	hints.ai_socktype = SOCK_STREAM;
SOURCE/ZoneMinder-1.28.0/scripts/zm:36:	#Make sure the folder for the socks file exists or create one
SOURCE/ZoneMinder-1.28.0/scripts/zm:37:	GetPath="select Value from Config where Name='ZM_PATH_SOCKS'"
SOURCE/ZoneMinder-1.28.0/scripts/zm:42:	    ZM_PATH_SOCK=`echo $GetPath | mysql -B -h$ZM_DB_HOST -u$ZM_DB_USER -p$ZM_DB_PASS $ZM_DB_NAME | grep -v '^Value'`
SOURCE/ZoneMinder-1.28.0/scripts/zm:44:	    ZM_PATH_SOCK=`echo $GetPath | mysql -B -h$dbHost -P$dbPort -u$ZM_DB_USER -p$ZM_DB_PASS $ZM_DB_NAME | grep -v '^Value'`
SOURCE/ZoneMinder-1.28.0/scripts/zm:46:	[ ! -d $ZM_PATH_SOCK ] \
SOURCE/ZoneMinder-1.28.0/scripts/zm:47:		&& mkdir -m 774 $ZM_PATH_SOCK \
SOURCE/ZoneMinder-1.28.0/scripts/zm:48:		&& chown $ZM_WEB_USER:$ZM_WEB_GROUP $ZM_PATH_SOCK
SOURCE/ZoneMinder-1.28.0/scripts/zmtrigger.pl.in:56:push( @connections, ZoneMinder::Trigger::Connection->new( name=>"Chan2", channel=>ZoneMinder::Trigger::Channel::Unix->new( path=>$Config{ZM_PATH_SOCKS}.'/zmtrigger.sock' ), mode=>"rw" ) );
SOURCE/ZoneMinder-1.28.0/scripts/zmtrigger.pl.in:67:#use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:50:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:54:use constant SOCK_FILE => $Config{ZM_PATH_SOCKS}.'/zmdc.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:131:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:133:my $saddr = sockaddr_un( SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:160:        socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:215:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:244:    socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:245:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:354:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl:694:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:51:use constant SOCK_FILE => $Config{ZM_PATH_SOCKS}.'/zmx10.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:90:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:92:my $saddr = sockaddr_un( SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:105:		socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:151:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:166:	socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:167:	unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl.in:168:	my $saddr = sockaddr_un( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmpkg.pl.in:173:        # Recreate the sock directory if it's been wiped
SOURCE/ZoneMinder-1.28.0/scripts/zmpkg.pl.in:174:	verifyFolder("@ZM_SOCKDIR@");
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:50:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:54:use constant SOCK_FILE => $Config{ZM_PATH_SOCKS}.'/zmdc.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:131:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:133:my $saddr = sockaddr_un( SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:160:        socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:215:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:244:    socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:245:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:354:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmdc.pl.in:694:    unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Control/PelcoD.pm:178:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Control/PelcoD.pm:179:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Control/PelcoP.pm:179:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Control/PelcoP.pm:180:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Control/Visca.pm:172:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Control/Visca.pm:173:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:609:		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:610:		default => "/zoneminder/sock",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:611:		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:612:		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:1243:		name => "ZM_FRAME_SOCKET_SIZE",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:1245:		description => "Specify the frame server socket buffer size if non-standard",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:1247:		help => "For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm:1262:		description => "Interface external event triggers via socket or device files",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:609:		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:610:		default => "@ZM_SOCKDIR@",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:611:		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:612:		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:1243:		name => "ZM_FRAME_SOCKET_SIZE",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:1245:		description => "Specify the frame server socket buffer size if non-standard",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:1247:		help => "For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/ConfigData.pm.in:1262:		description => "Interface external event triggers via socket or device files",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Unix.pm:22:# This module contains the class definition of the unix socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Unix.pm:40:# Unix socket based trigger channel
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Unix.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Unix.pm:65:	my $saddr = sockaddr_un( $self->{path} );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Unix.pm:66:	socket( *sfh, PF_UNIX, SOCK_STREAM, 0 ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Inet.pm:22:# This module contains the class definition of the tcp socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Inet.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Inet.pm:64:	my $saddr = sockaddr_in( $self->{port}, INADDR_ANY );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Inet.pm:65:	socket( *sfh, PF_INET, SOCK_STREAM, getprotobyname('tcp') ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/lib/ZoneMinder/Trigger/Channel/Inet.pm:66:	setsockopt( *sfh, SOL_SOCKET, SO_REUSEADDR, 1 );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/PelcoD.pm:178:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/PelcoD.pm:179:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/PelcoP.pm:179:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/PelcoP.pm:180:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/Visca.pm:172:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Control/Visca.pm:173:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:609:		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:610:		default => "/zoneminder/sock",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:611:		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:612:		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:1243:		name => "ZM_FRAME_SOCKET_SIZE",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:1245:		description => "Specify the frame server socket buffer size if non-standard",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:1247:		help => "For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/ConfigData.pm:1262:		description => "Interface external event triggers via socket or device files",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Unix.pm:22:# This module contains the class definition of the unix socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Unix.pm:40:# Unix socket based trigger channel
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Unix.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Unix.pm:65:	my $saddr = sockaddr_un( $self->{path} );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Unix.pm:66:	socket( *sfh, PF_UNIX, SOCK_STREAM, 0 ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Inet.pm:22:# This module contains the class definition of the tcp socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Inet.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Inet.pm:64:	my $saddr = sockaddr_in( $self->{port}, INADDR_ANY );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Inet.pm:65:	socket( *sfh, PF_INET, SOCK_STREAM, getprotobyname('tcp') ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/output/lib/perl5/ZoneMinder/Trigger/Channel/Inet.pm:66:	setsockopt( *sfh, SOL_SOCKET, SO_REUSEADDR, 1 );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/PelcoD.pm:178:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/PelcoD.pm:179:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/PelcoP.pm:179:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/PelcoP.pm:180:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/Visca.pm:172:                        my $socket = $resp[1] & 0x0f;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Control/Visca.pm:173:                        Debug( "Got ack for socket $socket" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:609:		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:610:		default => "/zoneminder/sock",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:611:		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:612:		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:1243:		name => "ZM_FRAME_SOCKET_SIZE",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:1245:		description => "Specify the frame server socket buffer size if non-standard",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:1247:		help => "For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm:1262:		description => "Interface external event triggers via socket or device files",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:609:		name => "ZM_PATH_SOCKS",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:610:		default => "@ZM_SOCKDIR@",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:611:		description => "Path to the various Unix domain socket files that ZoneMinder uses",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:612:		help => "ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:1243:		name => "ZM_FRAME_SOCKET_SIZE",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:1245:		description => "Specify the frame server socket buffer size if non-standard",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:1247:		help => "For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/ConfigData.pm.in:1262:		description => "Interface external event triggers via socket or device files",
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Unix.pm:22:# This module contains the class definition of the unix socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Unix.pm:40:# Unix socket based trigger channel
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Unix.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Unix.pm:65:	my $saddr = sockaddr_un( $self->{path} );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Unix.pm:66:	socket( *sfh, PF_UNIX, SOCK_STREAM, 0 ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Inet.pm:22:# This module contains the class definition of the tcp socket based trigger
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Inet.pm:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Inet.pm:64:	my $saddr = sockaddr_in( $self->{port}, INADDR_ANY );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Inet.pm:65:	socket( *sfh, PF_INET, SOCK_STREAM, getprotobyname('tcp') ) or croak( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/ZoneMinder/blib/lib/ZoneMinder/Trigger/Channel/Inet.pm:66:	setsockopt( *sfh, SOL_SOCKET, SO_REUSEADDR, 1 );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:34:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:91:my $sock_file = $Config{ZM_PATH_SOCKS}.'/zmcontrol-'.$id.'.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:93:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:95:my $saddr = sockaddr_un( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:137:        socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or die( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:167:        socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:168:        unlink( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl:219:        unlink( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zmpkg.pl:173:        # Recreate the sock directory if it's been wiped
SOURCE/ZoneMinder-1.28.0/scripts/zmpkg.pl:174:	verifyFolder("/zoneminder/sock");
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:47:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:51:use constant SOCK_FILE => $Config{ZM_PATH_SOCKS}.'/zmx10.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:90:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:92:my $saddr = sockaddr_un( SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:105:		socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:151:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:166:	socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:167:	unlink( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmx10.pl:168:	my $saddr = sockaddr_un( main::SOCK_FILE );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:34:use Socket;
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:91:my $sock_file = $Config{ZM_PATH_SOCKS}.'/zmcontrol-'.$id.'.sock';
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:93:socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:95:my $saddr = sockaddr_un( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:137:        socket( CLIENT, PF_UNIX, SOCK_STREAM, 0 ) or die( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:167:        socket( SERVER, PF_UNIX, SOCK_STREAM, 0 ) or Fatal( "Can't open socket: $!" );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:168:        unlink( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zmcontrol.pl.in:219:        unlink( $sock_file );
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:36:	#Make sure the folder for the socks file exists or create one
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:37:	GetPath="select Value from Config where Name='ZM_PATH_SOCKS'"
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:42:	    ZM_PATH_SOCK=`echo $GetPath | mysql -B -h$ZM_DB_HOST -u$ZM_DB_USER -p$ZM_DB_PASS $ZM_DB_NAME | grep -v '^Value'`
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:44:	    ZM_PATH_SOCK=`echo $GetPath | mysql -B -h$dbHost -P$dbPort -u$ZM_DB_USER -p$ZM_DB_PASS $ZM_DB_NAME | grep -v '^Value'`
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:46:	[ ! -d $ZM_PATH_SOCK ] \
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:47:		&& mkdir -m 774 $ZM_PATH_SOCK \
SOURCE/ZoneMinder-1.28.0/scripts/zm.in:48:		&& chown $ZM_WEB_USER:$ZM_WEB_GROUP $ZM_PATH_SOCK
SOURCE/ZoneMinder-1.28.0/scripts/zmtrigger.pl:56:push( @connections, ZoneMinder::Trigger::Connection->new( name=>"Chan2", channel=>ZoneMinder::Trigger::Channel::Unix->new( path=>$Config{ZM_PATH_SOCKS}.'/zmtrigger.sock' ), mode=>"rw" ) );
SOURCE/ZoneMinder-1.28.0/scripts/zmtrigger.pl:67:#use Socket;
SOURCE/ZoneMinder-1.28.0/install_manifest.txt:479:/srv/http/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php
SOURCE/ZoneMinder-1.28.0/install_manifest.txt:483:/srv/http/api/lib/Cake/Test/Case/Network/CakeSocketTest.php
SOURCE/ZoneMinder-1.28.0/install_manifest.txt:1179:/srv/http/api/lib/Cake/Network/Http/HttpSocketResponse.php
SOURCE/ZoneMinder-1.28.0/install_manifest.txt:1181:/srv/http/api/lib/Cake/Network/Http/HttpSocket.php
SOURCE/ZoneMinder-1.28.0/install_manifest.txt:1185:/srv/http/api/lib/Cake/Network/CakeSocket.php
SOURCE/ZoneMinder-1.28.0/configure.ac:46:AC_ARG_VAR(ZM_SOCKDIR,[Location of Unix domain socket files, default /var/run/zm])
SOURCE/ZoneMinder-1.28.0/configure.ac:74:if test "$ZM_SOCKDIR" == ""; then
SOURCE/ZoneMinder-1.28.0/configure.ac:75:	AC_SUBST(ZM_SOCKDIR,[/var/run/zm])
SOURCE/ZoneMinder-1.28.0/configure.ac:293:AC_CHECK_FUNCS([gethostbyname gethostname gettimeofday memmove memset mkdir munmap posix_memalign putenv select sendfile socket sqrt strcasecmp strchr strcspn strerror strncasecmp strrchr strspn strstr strtol strtoull])
SOURCE/ZoneMinder-1.28.0/configure.ac:294:AC_CHECK_FUNCS([syscall sleep usleep ioctl ioctlsocket sigaction])
SOURCE/ZoneMinder-1.28.0/configure.ac:347:AC_CHECK_HEADERS([netdb.h netinet/in.h arpa/inet.h sys/ioctl.h sys/socket.h sys/un.h glob.h sys/sendfile.h])
SOURCE/ZoneMinder-1.28.0/srv.installed:384:/srv/http/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php
SOURCE/ZoneMinder-1.28.0/srv.installed:388:/srv/http/api/lib/Cake/Test/Case/Network/CakeSocketTest.php
SOURCE/ZoneMinder-1.28.0/srv.installed:1084:/srv/http/api/lib/Cake/Network/Http/HttpSocketResponse.php
SOURCE/ZoneMinder-1.28.0/srv.installed:1086:/srv/http/api/lib/Cake/Network/Http/HttpSocket.php
SOURCE/ZoneMinder-1.28.0/srv.installed:1090:/srv/http/api/lib/Cake/Network/CakeSocket.php
SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php:804:    'FRAME_SOCKET_SIZE' => array(
SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php:806:        'Help' => "Pentru imaginile de dimensiuni mari capturate este posibil ca scrierea lor pe disc s&#259; e&#351;ueze deoarece cantitatea de informa&#355;ie scris&#259; este mai mare dec&#226;t memoria tampon alocat&#259;. De&#351;i imaginile sunt scrise apoi de c&#259;tre daemon-ul de analiz&#259;, se distruge obiectul daemon-ului de cadre. Pute&#355;i folosi aceast&#259; op&#355;iune pentru a specifica o memorie tampon de dimensiuni mai mari. Va trebui sa modifica&#355;i dimensiunea socket-ului tampon maxim folosind 'sysctl' (sau in /proc/sys/net/core/wmem_max) pentru a permite setarea acestei noi valori. Alternativa este s&#259; schimba&#355;i m&#259;rimea implicit&#259; a memorie tampon a sistemului, caz &#238;n care modificarea acestei valori nu mai este necesar&#259;."
SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php:835:    'PATH_SOCKS' => array(
SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php:836:        'Prompt' => "Calea socket-urilor Unix care sunt folosite de ZoneMinder ",
SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php:837:        'Help' => "&#206;n general ZoneMinder folose&#351;te socket-urilor Unix. Astfel se reduce nevoia de a asigna porturi &#351;i &#238;mpiedic&#259; eventualele conflicte cu aplica&#355;ii externe. Fiecare socket Unix necesit&#259; un fi&#351;ier cu extensia .sock. Aceast&#259; op&#355;iune indic&#259; unde vor fi stocare fi&#351;ierele .sock."
SOURCE/ZoneMinder-1.28.0/web/lang/ro_ro.php:1156:        'Prompt' => "Interac&#355;ioneaz&#259; cu declan&#351;atoare externe via socket sau fi&#351;ierele dispozitivelor",
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:16:        $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:17:        if ( !$socket )
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:18:            ajaxError( "socket_create() failed: ".socket_strerror(socket_last_error()) );
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:20:        $sock_file = ZM_PATH_SOCKS.'/zmcontrol-'.$monitor['Id'].'.sock';
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:21:        if ( @socket_connect( $socket, $sock_file ) )
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:32:            if ( !socket_write( $socket, $option_string ) )
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:33:                ajaxError( "socket_write() failed: ".socket_strerror(socket_last_error()) );
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:34:            ajaxResponse( 'Used socket' );
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:35:            //socket_close( $socket );
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:60:    global $socket;
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:61:    if ( !empty( $socket ) )
SOURCE/ZoneMinder-1.28.0/web/ajax/control.php:62:        @socket_close( $socket );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:11:if ( !($socket = @socket_create( AF_UNIX, SOCK_DGRAM, 0 )) )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:13:    ajaxError( "socket_create() failed: ".socket_strerror(socket_last_error()) );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:15:$locSockFile = ZM_PATH_SOCKS.'/zms-'.sprintf("%06d",$_REQUEST['connkey']).'w.sock';
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:16:if ( !@socket_bind( $socket, $locSockFile ) )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:18:    ajaxError( "socket_bind( $locSockFile ) failed: ".socket_strerror(socket_last_error()) );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:48:$remSockFile = ZM_PATH_SOCKS.'/zms-'.sprintf("%06d",$_REQUEST['connkey']).'s.sock';
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:49:$max_socket_tries = 10;
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:50:while ( !file_exists($remSockFile) && $max_socket_tries-- ) //sometimes we are too fast for our own good, if it hasn't been setup yet give it a second.
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:53:if ( !@socket_sendto( $socket, $msg, strlen($msg), 0, $remSockFile ) )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:55:    ajaxError( "socket_sendto( $remSockFile ) failed: ".socket_strerror(socket_last_error()) );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:58:$rSockets = array( $socket );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:59:$wSockets = NULL;
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:60:$eSockets = NULL;
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:61:$numSockets = @socket_select( $rSockets, $wSockets, $eSockets, intval(MSG_TIMEOUT/1000), (MSG_TIMEOUT%1000)*1000 );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:63:if ( $numSockets === false )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:65:    ajaxError( "socket_select failed: ".socket_strerror(socket_last_error()) );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:67:else if ( $numSockets < 0 )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:69:    ajaxError( "Socket closed $remSockFile"  );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:71:else if ( $numSockets == 0 )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:73:    ajaxError( "Timed out waiting for msg $remSockFile"  );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:75:else if ( $numSockets > 0 )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:77:    if ( count($rSockets) != 1 )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:78:        ajaxError( "Bogus return from select, ".count($rSockets)." sockets available" );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:81:switch( $nbytes = @socket_recvfrom( $socket, $msg, MSG_DATA_SIZE, 0, $remSockFile ) )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:85:        ajaxError( "socket_recvfrom( $remSockFile ) failed: ".socket_strerror(socket_last_error()) );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:90:        ajaxError( "No data to read from socket" );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:133:    global $socket, $locSockFile;
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:134:    if ( !empty( $socket ) )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:135:        @socket_close( $socket );
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:136:    if ( !empty( $locSockFile ) )
SOURCE/ZoneMinder-1.28.0/web/ajax/stream.php:137:        @unlink( $locSockFile );
SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php:38: * the host you connect to the database. To add a socket or port number, use 'port' => #
SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php:53: * unix_socket =>
SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php:54: * For MySQL to connect via socket specify the `unix_socket` parameter instead of `host` and `port`
SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php.default:38: * the host you connect to the database. To add a socket or port number, use 'port' => #
SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php.default:53: * unix_socket =>
SOURCE/ZoneMinder-1.28.0/web/api/app/Config/database.php.default:54: * For MySQL to connect via socket specify the `unix_socket` parameter instead of `host` and `port`
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Error/exceptions.php:554: * Exception class for Socket. This exception will be thrown from CakeSocket, CakeEmail, HttpSocket
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Error/exceptions.php:559:class SocketException extends CakeException {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Cache/Engine/MemcacheEngine.php:101: * addresses and Unix sockets
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Cache/Engine/MemcachedEngine.php:168: * addresses and Unix sockets
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Error/ExceptionRendererTest.php:294:		$exception = new SocketException('socket exception');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Cache/Engine/MemcachedEngineTest.php:407: * test unix sockets.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Cache/Engine/MemcachedEngineTest.php:413:		$result = $Memcached->parseServerString('unix:///path/to/memcachedd.sock');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Cache/Engine/MemcachedEngineTest.php:414:		$this->assertEquals(array('unix:///path/to/memcachedd.sock', 0), $result);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Cache/Engine/MemcacheEngineTest.php:179: * test unix sockets.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Cache/Engine/MemcacheEngineTest.php:185:		$result = $Memcache->parseServerString('unix:///path/to/memcached.sock');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Cache/Engine/MemcacheEngineTest.php:186:		$this->assertEquals(array('unix:///path/to/memcached.sock', 0), $result);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/AllNetworkTest.php:22: * This test group will run socket class tests
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Controller/Component/EmailComponentTest.php:778:		} catch (SocketException $e) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Controller/Component/EmailComponentTest.php:779:			$this->assertTrue(true, 'SocketException raised');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:19:App::uses('HttpSocket', 'Network/Http');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:23: * Class DigestHttpSocket
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:27:class DigestHttpSocket extends HttpSocket {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:62: * Socket property
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:66:	public $HttpSocket = null;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:69: * This function sets up a HttpSocket instance we are going to use for testing
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:75:		$this->HttpSocket = new DigestHttpSocket();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:76:		$this->HttpSocket->request['method'] = 'GET';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:77:		$this->HttpSocket->request['uri']['path'] = '/';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:87:		unset($this->HttpSocket);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:96:		$this->HttpSocket->nextHeader = 'Digest realm="The batcave",nonce="4cded326c6c51"';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:97:		$this->assertFalse(isset($this->HttpSocket->request['header']['Authorization']));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:100:		DigestAuthentication::authentication($this->HttpSocket, $auth);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:101:		$this->assertTrue(isset($this->HttpSocket->request['header']['Authorization']));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:112:		$this->HttpSocket->nextHeader = 'Digest realm="The batcave",nonce="4cded326c6c51"';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:114:		DigestAuthentication::authentication($this->HttpSocket, $auth);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:116:		$this->assertEquals($expected, $this->HttpSocket->request['header']['Authorization']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:120:		$this->HttpSocket->nextHeader = 'Digest realm="The batcave",nonce="4cded326c6c51",qop="auth"';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:122:		DigestAuthentication::authentication($this->HttpSocket, $auth);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:124:		$this->assertRegExp($expected, $this->HttpSocket->request['header']['Authorization']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:135:		$this->HttpSocket->nextHeader = 'Digest realm="The batcave",nonce="4cded326c6c51"';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:137:		DigestAuthentication::authentication($this->HttpSocket, $auth);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:138:		$this->assertFalse(strpos($this->HttpSocket->request['header']['Authorization'], 'opaque="d8ea7aa61a1693024c4cc3a516f49b3c"'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:140:		$this->HttpSocket->nextHeader = 'Digest realm="The batcave",nonce="4cded326c6c51",opaque="d8ea7aa61a1693024c4cc3a516f49b3c"';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:142:		DigestAuthentication::authentication($this->HttpSocket, $auth);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:143:		$this->assertTrue(strpos($this->HttpSocket->request['header']['Authorization'], 'opaque="d8ea7aa61a1693024c4cc3a516f49b3c"') > 0);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:152:		$this->HttpSocket->nextHeader = 'Digest realm="The batcave",nonce="4cded326c6c51",qop="auth"';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:154:		DigestAuthentication::authentication($this->HttpSocket, $auth);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:155:		$this->assertTrue(strpos($this->HttpSocket->request['header']['Authorization'], 'nc=00000001') > 0);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:158:		DigestAuthentication::authentication($this->HttpSocket, $auth);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:159:		$this->assertTrue(strpos($this->HttpSocket->request['header']['Authorization'], 'nc=00000002') > 0);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:161:		$responsePos = strpos($this->HttpSocket->request['header']['Authorization'], 'response=');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:162:		$response = substr($this->HttpSocket->request['header']['Authorization'], $responsePos + 10, 32);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:164:		$this->HttpSocket->nextHeader = '';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:165:		DigestAuthentication::authentication($this->HttpSocket, $auth);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:166:		$this->assertTrue(strpos($this->HttpSocket->request['header']['Authorization'], 'nc=00000003') > 0);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:168:		$responsePos = strpos($this->HttpSocket->request['header']['Authorization'], 'response=');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:169:		$responseB = substr($this->HttpSocket->request['header']['Authorization'], $responsePos + 10, 32);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:179:		$this->HttpSocket->nextHeader = 'Digest realm="The batcave",nonce="4cded326c6c51"';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:180:		$this->HttpSocket->request['uri']['path'] = '/admin';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:182:		DigestAuthentication::authentication($this->HttpSocket, $auth);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:183:		$responsePos = strpos($this->HttpSocket->request['header']['Authorization'], 'response=');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:184:		$response = substr($this->HttpSocket->request['header']['Authorization'], $responsePos + 10, 32);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:194:		$this->HttpSocket->nextHeader = false;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:195:		$this->HttpSocket->request['uri']['path'] = '/admin';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:197:		DigestAuthentication::authentication($this->HttpSocket, $auth);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/DigestAuthenticationTest.php:198:		$this->assertFalse(isset($this->HttpSocket->request['header']['Authorization']));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/BasicAuthenticationTest.php:19:App::uses('HttpSocket', 'Network/Http');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/BasicAuthenticationTest.php:35:		$http = new HttpSocket();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/BasicAuthenticationTest.php:52:		$http = new HttpSocket();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:3: * HttpSocketTest file
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:19:App::uses('HttpSocket', 'Network/Http');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:32: * @param HttpSocket $http
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:36:	public static function authentication(HttpSocket $http, &$authInfo) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:43: * @param HttpSocket $http
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:47:	public static function proxyAuthentication(HttpSocket $http, &$proxyInfo) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:77: * TestHttpSocket
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:80:class TestHttpSocket extends HttpSocket {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:168: * HttpSocketTest class
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:172:class HttpSocketTest extends CakeTestCase {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:175: * Socket property
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:179:	public $Socket = null;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:182: * RequestSocket property
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:186:	public $RequestSocket = null;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:189: * This function sets up a TestHttpSocket instance we are going to use for testing
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:195:		$this->Socket = $this->getMock('TestHttpSocket', array('read', 'write', 'connect'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:196:		$this->RequestSocket = $this->getMock('TestHttpSocket', array('read', 'write', 'connect', 'request'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:206:		unset($this->Socket, $this->RequestSocket);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:210: * Test that HttpSocket::__construct does what one would expect it to do
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:215:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:216:		$baseConfig = $this->Socket->config;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:217:		$this->Socket->expects($this->never())->method('connect');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:218:		$this->Socket->__construct(array('host' => 'foo-bar'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:221:		$this->assertEquals($this->Socket->config, $baseConfig);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:223:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:224:		$baseConfig = $this->Socket->config;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:225:		$this->Socket->__construct('http://www.cakephp.org:23/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:230:		$this->assertEquals($this->Socket->config, $baseConfig);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:232:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:233:		$this->Socket->__construct(array('request' => array('uri' => 'http://www.cakephp.org:23/')));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:234:		$this->assertEquals($this->Socket->config, $baseConfig);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:238: * Test that HttpSocket::configUri works properly with different types of arguments
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:243:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:244:		$r = $this->Socket->configUri('https://bob:secret@www.cakephp.org:23/?query=foo');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:265:		$this->assertEquals($expected, $this->Socket->config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:267:		$r = $this->Socket->configUri(array('host' => 'www.foo-bar.org'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:270:		$this->assertEquals($expected, $this->Socket->config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:273:		$r = $this->Socket->configUri('http://www.foo.com');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:294:		$this->assertEquals($expected, $this->Socket->config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:297:		$r = $this->Socket->configUri('/this-is-broken');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:298:		$this->assertEquals($expected, $this->Socket->config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:301:		$r = $this->Socket->configUri(false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:302:		$this->assertEquals($expected, $this->Socket->config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:307: * Tests that HttpSocket::request (the heart of the HttpSocket) is working properly.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:312:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:314:		$response = $this->Socket->request(true);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:434:				'request' => array('header' => "Foo: bar\r\n", 'uri' => 'http://www.cakephp.org/search?q=http_socket#ignore-me'),
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:439:							'query' => array('q' => 'http_socket'),
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:442:						'line' => "GET /search?q=http_socket HTTP/1.1\r\n"
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:454:						'name' => 'HttpSocket-is-released',
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:465:						'body' => "name=HttpSocket-is-released&date=today",
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:468:						'raw' => "name=HttpSocket-is-released&date=today"
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:477:						'name' => 'HttpSocket-is-released',
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:503:						'name' => 'HttpSocket-is-released',
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:530:					'body' => array('name' => 'HttpSocket-is-released', 'date' => 'today'),
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:556:			$this->Socket->request($test['request']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:561:			$r = array('config' => $this->Socket->config, 'request' => $this->Socket->request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:566:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:567:		$request = array('method' => 'POST', 'uri' => 'http://www.cakephp.org/posts/add', 'body' => array('name' => 'HttpSocket-is-released', 'date' => 'today'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:568:		$response = $this->Socket->request($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:569:		$this->assertEquals("name=HttpSocket-is-released&date=today", $this->Socket->request['body']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:578:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:588:		$this->Socket->request($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:589:		$this->assertContains('Host: cakephp.org:8080', $this->Socket->request['header']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:598:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:608:		$this->Socket->request($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:609:		$this->assertContains("GET /index.php?somestring HTTP/1.1", $this->Socket->request['line']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:615: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:619:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:621:		$this->Socket->request($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:630:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:633:		$this->Socket->expects($this->any())->method('connect')->will($this->returnValue(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:635:		$this->Socket->expects($this->at(0))->method('write')
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:637:		$this->Socket->expects($this->at(0))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:638:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:639:		$response = (string)$this->Socket->request($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:651:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:652:		$this->Socket->connected = true;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:653:		$this->Socket->request($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:654:		$result = $this->Socket->response['cookies'];
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:661:		$this->assertEquals($expected, $this->Socket->config['request']['cookies']['www.cakephp.org']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:662:		$this->assertFalse($this->Socket->connected);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:682:		$http = $this->getMock('TestHttpSocket', array('read', 'write', 'connect', 'request'), array($request));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:700:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:701:		$this->Socket->expects($this->at(2))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:702:		$this->Socket->expects($this->at(4))->method('read')->will($this->returnValue($serverResponse));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:703:		$this->Socket->connected = true;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:710:		$this->Socket->setContentResource($f);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:711:		$result = (string)$this->Socket->request('http://www.cakephp.org/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:713:		$this->assertEquals('CakeHttp Server', $this->Socket->response['header']['Server']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:718:		$this->Socket->setContentResource(false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:719:		$result = (string)$this->Socket->request('http://www.cakephp.org/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:729:		$this->Socket->connected = true;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:730:		$this->Socket->config['request']['cookies'] = array();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:733:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:734:		$this->Socket->expects($this->at(2))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:736:		$this->Socket->request('http://www.cakephp.org/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:737:		$this->assertEquals($expected, $this->Socket->config['request']['cookies']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:740:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:741:		$this->Socket->expects($this->at(2))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:742:		$this->Socket->request('http://www.cakephp.org/other');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:743:		$this->assertEquals(array('foo' => array('value' => 'bar')), $this->Socket->request['cookies']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:745:		$this->assertEquals($expected, $this->Socket->config['request']['cookies']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:748:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:749:		$this->Socket->expects($this->at(2))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:750:		$this->Socket->request('/other2');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:751:		$this->assertEquals($expected, $this->Socket->config['request']['cookies']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:754:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:755:		$this->Socket->expects($this->at(2))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:756:		$this->Socket->request('http://www.cake.com');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:757:		$this->assertTrue(empty($this->Socket->request['cookies']));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:759:		$this->assertEquals($expected, $this->Socket->config['request']['cookies']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:768:		$this->Socket->connected = true;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:770:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:771:		$this->Socket->expects($this->at(2))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:773:		$this->Socket->responseClass = 'CustomResponse';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:774:		$response = $this->Socket->request('http://www.cakephp.org/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:792:		$this->Socket->expects($this->at(1))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:796:		$this->Socket->expects($this->at(3))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:803:		$this->Socket->expects($this->at(4))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:807:		$response = $this->Socket->request($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:823:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse1));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:824:		$this->Socket->expects($this->at(4))->method('read')->will($this->returnValue($serverResponse2));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:826:		$response = $this->Socket->request($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:842:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse1));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:843:		$this->Socket->expects($this->at(4))->method('read')->will($this->returnValue($serverResponse2));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:845:		$this->Socket->request($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:846:		$this->assertEquals(1, $this->Socket->request['redirect']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:861:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse1));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:862:		$this->Socket->expects($this->at(4))->method('read')->will($this->returnValue($serverResponse2));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:864:		$response = $this->Socket->request($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:865:		$this->assertEquals(0, $this->Socket->request['redirect']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:876:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:877:		$this->Socket->expects($this->any())->method('connect')->will($this->returnValue(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:878:		$this->Socket->expects($this->any())->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:880:		$this->Socket->configProxy('proxy.server', 123);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:882:		$this->Socket->request('http://www.cakephp.org/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:883:		$this->assertEquals($expected, $this->Socket->request['raw']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:884:		$this->assertEquals('proxy.server', $this->Socket->config['host']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:885:		$this->assertEquals(123, $this->Socket->config['port']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:893:		$this->assertEquals($expected, $this->Socket->request['proxy']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:896:		$this->Socket->request('/bakery');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:897:		$this->assertEquals($expected, $this->Socket->request['raw']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:898:		$this->assertEquals('proxy.server', $this->Socket->config['host']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:899:		$this->assertEquals(123, $this->Socket->config['port']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:907:		$this->assertEquals($expected, $this->Socket->request['proxy']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:910:		$this->Socket->configProxy('proxy.server', 123, 'Test', 'mark', 'secret');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:911:		$this->Socket->request('http://www.cakephp.org/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:912:		$this->assertEquals($expected, $this->Socket->request['raw']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:913:		$this->assertEquals('proxy.server', $this->Socket->config['host']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:914:		$this->assertEquals(123, $this->Socket->config['port']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:922:		$this->assertEquals($expected, $this->Socket->request['proxy']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:924:		$this->Socket->configAuth('Test', 'login', 'passwd');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:926:		$this->Socket->request('http://www.cakephp.org/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:927:		$this->assertEquals($expected, $this->Socket->request['raw']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:935:		$this->assertEquals($expected, $this->Socket->request['proxy']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:942:		$this->assertEquals($expected, $this->Socket->request['auth']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:951:		$this->Socket->reset(true);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:953:		$this->assertEquals(false, $this->Socket->url(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:955:		$url = $this->Socket->url('www.cakephp.org');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:958:		$url = $this->Socket->url('https://www.cakephp.org/posts/add');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:960:		$url = $this->Socket->url('http://www.cakephp/search?q=socket', '/%path?%query');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:961:		$this->assertEquals('/search?q=socket', $url);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:963:		$this->Socket->config['request']['uri']['host'] = 'bakery.cakephp.org';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:964:		$url = $this->Socket->url();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:967:		$this->Socket->configUri('http://www.cakephp.org');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:968:		$url = $this->Socket->url('/search?q=bar');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:971:		$url = $this->Socket->url(array('host' => 'www.foobar.org', 'query' => array('q' => 'bar')));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:974:		$url = $this->Socket->url(array('path' => '/supersearch', 'query' => array('q' => 'bar')));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:977:		$this->Socket->configUri('http://www.google.com');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:978:		$url = $this->Socket->url('/search?q=socket');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:979:		$this->assertEquals('http://www.google.com/search?q=socket', $url);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:981:		$url = $this->Socket->url();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:984:		$this->Socket->configUri('https://www.google.com');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:985:		$url = $this->Socket->url('/search?q=socket');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:986:		$this->assertEquals('https://www.google.com/search?q=socket', $url);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:988:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:989:		$this->Socket->configUri('www.google.com:443');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:990:		$url = $this->Socket->url('/search?q=socket');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:991:		$this->assertEquals('https://www.google.com/search?q=socket', $url);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:993:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:994:		$this->Socket->configUri('www.google.com:8080');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:995:		$url = $this->Socket->url('/search?q=socket');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:996:		$this->assertEquals('http://www.google.com:8080/search?q=socket', $url);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1005:		$this->RequestSocket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1007:		$this->RequestSocket->expects($this->at(0))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1011:		$this->RequestSocket->expects($this->at(1))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1015:		$this->RequestSocket->expects($this->at(2))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1019:		$this->RequestSocket->expects($this->at(3))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1023:		$this->RequestSocket->expects($this->at(4))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1027:		$this->RequestSocket->expects($this->at(5))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1031:		$this->RequestSocket->expects($this->at(6))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1035:		$this->RequestSocket->get('http://www.google.com/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1036:		$this->RequestSocket->get('http://www.google.com/', array('foo' => 'bar'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1037:		$this->RequestSocket->get('http://www.google.com/', 'foo=bar');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1038:		$this->RequestSocket->get('http://www.google.com/?foo=bar', array('foobar' => '42', 'foo' => '23'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1039:		$this->RequestSocket->get('http://www.google.com/', null, array('version' => '1.0'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1040:		$this->RequestSocket->get('https://secure.example.com/test.php', array('one' => 'two'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1041:		$this->RequestSocket->get('https://example.com/oauth/access', array(
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1054:		$this->Socket->get('http://mark:secret@example.com/test');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1055:		$this->assertTrue(strpos($this->Socket->request['header'], 'Authorization: Basic bWFyazpzZWNyZXQ=') !== false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1057:		$this->Socket->configAuth(false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1058:		$this->Socket->get('http://example.com/test');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1059:		$this->assertFalse(strpos($this->Socket->request['header'], 'Authorization:'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1061:		$this->Socket->configAuth('Test', 'mark', 'passwd');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1062:		$this->Socket->get('http://example.com/test');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1063:		$this->assertTrue(strpos($this->Socket->request['header'], 'Authorization: Test mark.passwd') !== false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1065:		$this->Socket->configAuth(false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1066:		$this->Socket->request(array(
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1075:		$this->assertEquals($this->Socket->request['auth'], array('Basic' => array('user' => 'joel', 'pass' => 'hunter2')));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1076:		$this->assertTrue(strpos($this->Socket->request['header'], 'Authorization: Basic am9lbDpodW50ZXIy') !== false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1085:		$this->Socket->get('http://mark:secret@example.com/test');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1086:		$this->assertEquals('mark', $this->Socket->request['uri']['user']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1087:		$this->assertEquals('secret', $this->Socket->request['uri']['pass']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1088:		$this->assertTrue(strpos($this->Socket->request['header'], 'Authorization: Basic bWFyazpzZWNyZXQ=') !== false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1090:		$this->Socket->get('/test2');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1091:		$this->assertTrue(strpos($this->Socket->request['header'], 'Authorization: Basic bWFyazpzZWNyZXQ=') !== false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1093:		$this->Socket->get('/test3');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1094:		$this->assertTrue(strpos($this->Socket->request['header'], 'Authorization: Basic bWFyazpzZWNyZXQ=') !== false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1103:		$this->RequestSocket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1104:		$this->RequestSocket->expects($this->at(0))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1108:		$this->RequestSocket->expects($this->at(1))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1112:		$this->RequestSocket->expects($this->at(2))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1116:		$this->RequestSocket->post('http://www.google.com/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1117:		$this->RequestSocket->post('http://www.google.com/', array('Foo' => 'bar'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1118:		$this->RequestSocket->post('http://www.google.com/', null, array('line' => 'Hey Server'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1127:		$this->RequestSocket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1128:		$this->RequestSocket->expects($this->at(0))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1132:		$this->RequestSocket->expects($this->at(1))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1136:		$this->RequestSocket->expects($this->at(2))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1140:		$this->RequestSocket->put('http://www.google.com/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1141:		$this->RequestSocket->put('http://www.google.com/', array('Foo' => 'bar'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1142:		$this->RequestSocket->put('http://www.google.com/', null, array('line' => 'Hey Server'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1151:		$this->RequestSocket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1152:		$this->RequestSocket->expects($this->at(0))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1156:		$this->RequestSocket->expects($this->at(1))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1160:		$this->RequestSocket->expects($this->at(2))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1164:		$this->RequestSocket->patch('http://www.google.com/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1165:		$this->RequestSocket->patch('http://www.google.com/', array('Foo' => 'bar'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1166:		$this->RequestSocket->patch('http://www.google.com/', null, array('line' => 'Hey Server'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1175:		$this->RequestSocket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1176:		$this->RequestSocket->expects($this->at(0))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1180:		$this->RequestSocket->expects($this->at(1))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1184:		$this->RequestSocket->expects($this->at(2))
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1188:		$this->RequestSocket->delete('http://www.google.com/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1189:		$this->RequestSocket->delete('http://www.google.com/', array('Foo' => 'bar'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1190:		$this->RequestSocket->delete('http://www.google.com/', null, array('line' => 'Hey Server'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1199:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1201:		$this->Socket->quirksMode = true;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1202:		$r = $this->Socket->buildRequestLine('Foo');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1204:		$this->Socket->quirksMode = false;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1206:		$r = $this->Socket->buildRequestLine(true);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1209:		$r = $this->Socket->buildRequestLine(array('foo' => 'bar', 'method' => 'foo'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1212:		$r = $this->Socket->buildRequestLine(array('method' => 'GET', 'uri' => 'http://www.cakephp.org/search?q=socket'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1213:		$this->assertEquals("GET /search?q=socket HTTP/1.1\r\n", $r);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1219:				'query' => array('q' => 'socket')
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1222:		$r = $this->Socket->buildRequestLine($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1223:		$this->assertEquals("GET /search?q=socket HTTP/1.1\r\n", $r);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1226:		$r = $this->Socket->buildRequestLine($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1227:		$this->assertEquals("GET /search?q=socket HTTP/1.1\r\n", $r);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1229:		$r = $this->Socket->buildRequestLine($request, 'CAKE-HTTP/0.1');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1230:		$this->assertEquals("GET /search?q=socket CAKE-HTTP/0.1\r\n", $r);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1233:		$r = $this->Socket->buildRequestLine($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1237:		$this->Socket->quirksMode = true;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1238:		$r = $this->Socket->buildRequestLine($request);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1241:		$r = $this->Socket->buildRequestLine("GET * HTTP/1.1\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1248: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1252:		$this->Socket->buildRequestLine('Foo');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1258: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1262:		$this->Socket->buildRequestLine("GET * HTTP/1.1\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1266: * Asserts that HttpSocket::parseUri is working properly
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1271:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1273:		$uri = $this->Socket->parseUri(array('invalid' => 'uri-string'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1276:		$uri = $this->Socket->parseUri(array('invalid' => 'uri-string'), array('host' => 'somehost'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1279:		$uri = $this->Socket->parseUri(false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1282:		$uri = $this->Socket->parseUri('/my-cool-path');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1285:		$uri = $this->Socket->parseUri('http://bob:foo123@www.cakephp.org:40/search?q=dessert#results');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1297:		$uri = $this->Socket->parseUri('http://www.cakephp.org/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1304:		$uri = $this->Socket->parseUri('http://www.cakephp.org', true);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1316:		$uri = $this->Socket->parseUri('https://www.cakephp.org', true);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1328:		$uri = $this->Socket->parseUri('www.cakephp.org:443/query?foo', true);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1340:		$uri = $this->Socket->parseUri('http://www.cakephp.org', array('host' => 'piephp.org', 'user' => 'bob', 'fragment' => 'results'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1348:		$uri = $this->Socket->parseUri('https://www.cakephp.org', array('scheme' => 'http', 'port' => 23));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1355:		$uri = $this->Socket->parseUri('www.cakephp.org:59', array('scheme' => array('http', 'https'), 'port' => 80));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1362:		$uri = $this->Socket->parseUri(array('scheme' => 'http', 'host' => 'www.google.com', 'port' => 8080), array('scheme' => array('http', 'https'), 'host' => 'www.google.com', 'port' => array(80, 443)));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1369:		$uri = $this->Socket->parseUri('http://www.cakephp.org/?param1=value1&param2=value2%3Dvalue3');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1380:		$uri = $this->Socket->parseUri('http://www.cakephp.org/?param1=value1&param2=value2=value3');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1393: * Tests that HttpSocket::buildUri can turn all kinds of uri arrays (and strings) into fully or partially qualified URI's
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1398:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1400:		$r = $this->Socket->buildUri(true);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1403:		$r = $this->Socket->buildUri('foo.com');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1406:		$r = $this->Socket->buildUri(array('host' => 'www.cakephp.org'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1409:		$r = $this->Socket->buildUri(array('host' => 'www.cakephp.org', 'scheme' => 'https'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1412:		$r = $this->Socket->buildUri(array('host' => 'www.cakephp.org', 'port' => 23));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1415:		$r = $this->Socket->buildUri(array('path' => 'www.google.com/search', 'query' => 'q=cakephp'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1418:		$r = $this->Socket->buildUri(array('host' => 'www.cakephp.org', 'scheme' => 'https', 'port' => 79));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1421:		$r = $this->Socket->buildUri(array('host' => 'www.cakephp.org', 'path' => 'foo'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1424:		$r = $this->Socket->buildUri(array('host' => 'www.cakephp.org', 'path' => '/foo'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1427:		$r = $this->Socket->buildUri(array('host' => 'www.cakephp.org', 'path' => '/search', 'query' => array('q' => 'HttpSocket')));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1428:		$this->assertEquals('http://www.cakephp.org/search?q=HttpSocket', $r);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1430:		$r = $this->Socket->buildUri(array('host' => 'www.cakephp.org', 'fragment' => 'bar'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1433:		$r = $this->Socket->buildUri(array(
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1445:		$r = $this->Socket->buildUri(array('host' => 'www.cakephp.org', 'fragment' => 'bar'), '%fragment?%host');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1448:		$r = $this->Socket->buildUri(array('host' => 'www.cakephp.org'), '%fragment???%host');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1451:		$r = $this->Socket->buildUri(array('path' => '*'), '/%path?%query');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1454:		$r = $this->Socket->buildUri(array('scheme' => 'foo', 'host' => 'www.cakephp.org'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1459: * Asserts that HttpSocket::parseQuery is working properly
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1464:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1466:		$query = $this->Socket->parseQuery(array('framework' => 'cakephp'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1469:		$query = $this->Socket->parseQuery('');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1472:		$query = $this->Socket->parseQuery('framework=cakephp');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1475:		$query = $this->Socket->parseQuery('?framework=cakephp');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1478:		$query = $this->Socket->parseQuery('a&b&c');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1481:		$query = $this->Socket->parseQuery('value=12345');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1484:		$query = $this->Socket->parseQuery('a[0]=foo&a[1]=bar&a[2]=cake');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1487:		$query = $this->Socket->parseQuery('a[]=foo&a[]=bar&a[]=cake');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1490:		$query = $this->Socket->parseQuery('a[][]=foo&a[][]=bar&a[][]=cake');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1506:		$query = $this->Socket->parseQuery('a[][]=foo&a[bar]=php&a[][]=bar&a[][]=cake');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1517:		$query = $this->Socket->parseQuery('user[]=jim&user[3]=tom&user[]=bob');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1528:		$query = $this->Socket->parseQuery($queryStr);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1554:		$result = $this->Socket->parseQuery($query);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1563: * Tests that HttpSocket::buildHeader can turn a given $header array into a proper header string according to
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1569:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1571:		$r = $this->Socket->buildHeader(true);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1574:		$r = $this->Socket->buildHeader('My raw header');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1577:		$r = $this->Socket->buildHeader(array('Host' => 'www.cakephp.org'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1580:		$r = $this->Socket->buildHeader(array('Host' => 'www.cakephp.org', 'Connection' => 'Close'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1583:		$r = $this->Socket->buildHeader(array('People' => array('Bob', 'Jim', 'John')));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1586:		$r = $this->Socket->buildHeader(array('Multi-Line-Field' => "This is my\r\nMulti Line field"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1589:		$r = $this->Socket->buildHeader(array('Multi-Line-Field' => "This is my\r\n Multi Line field"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1592:		$r = $this->Socket->buildHeader(array('Multi-Line-Field' => "This is my\r\n\tMulti Line field"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1595:		$r = $this->Socket->buildHeader(array('Test@Field' => "My value"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1616:		$result = $this->Socket->buildCookies($cookies);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1621: * Tests that HttpSocket::_tokenEscapeChars() returns the right characters.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1626:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1634:		$r = $this->Socket->tokenEscapeChars();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1641:		$r = $this->Socket->tokenEscapeChars(false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1646: * Test that HttpSocket::escapeToken is escaping all characters as described in RFC 2616 (HTTP 1.1 specs)
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1651:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1653:		$this->assertEquals('Foo', $this->Socket->escapeToken('Foo'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1655:		$escape = $this->Socket->tokenEscapeChars(false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1658:			$escapedToken = $this->Socket->escapeToken($token);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1665:		$escapedToken = $this->Socket->escapeToken($token);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1671: * This tests asserts HttpSocket::reset() resets a HttpSocket instance to it's initial state (before Object::__construct
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1677:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1679:		$initialState = get_class_vars('HttpSocket');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1681:			$this->Socket->{$property} = 'Overwritten';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1684:		$return = $this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1687:			$this->assertEquals($this->Socket->{$property}, $value);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1694: * This tests asserts HttpSocket::reset(false) resets certain HttpSocket properties to their initial state (before
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1700:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1703:		$initialState = get_class_vars('HttpSocket');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1706:			$this->Socket->{$property} = 'Overwritten';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1709:		$return = $this->Socket->reset(false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1713:				$this->assertEquals($this->Socket->{$property}, $originalValue);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1715:				$this->assertEquals('Overwritten', $this->Socket->{$property});
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1727:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1728:		$this->Socket->request('http://example.com');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1729:		$this->assertTrue($this->Socket->config['context']['ssl']['verify_peer']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1730:		$this->assertFalse($this->Socket->config['context']['ssl']['allow_self_signed']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1731:		$this->assertEquals(5, $this->Socket->config['context']['ssl']['verify_depth']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1732:		$this->assertEquals('example.com', $this->Socket->config['context']['ssl']['CN_match']);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1733:		$this->assertArrayNotHasKey('ssl_verify_peer', $this->Socket->config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1734:		$this->assertArrayNotHasKey('ssl_allow_self_signed', $this->Socket->config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1735:		$this->assertArrayNotHasKey('ssl_verify_host', $this->Socket->config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1736:		$this->assertArrayNotHasKey('ssl_verify_depth', $this->Socket->config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1746:		$socket = new HttpSocket();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1748:			$socket->get('https://typography.com');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1750:		} catch (SocketException $e) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1779:		$this->Socket->connected = true;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1781:		$this->Socket->expects($this->at(1))->method('read')->will($this->returnValue($serverResponse));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1782:		$this->Socket->expects($this->at(2))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1784:		$response = $this->Socket->request('http://www.cakephp.org/');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php:1785:		$this->assertInstanceOf('HttpSocketResponse', $response);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpResponseTest.php:229: * Test that HttpSocket::parseHeader can take apart a given (and valid) $header string and turn it into an array.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpResponseTest.php:357: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpResponseTest.php:456: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Http/HttpResponseTest.php:506: * Test that escaped token strings are properly unescaped by HttpSocket::unescapeToken
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:3: * SocketTest file
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:19:App::uses('CakeSocket', 'Network');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:22: * SocketTest class
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:26:class CakeSocketTest extends CakeTestCase {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:35:		$this->Socket = new CakeSocket(array('timeout' => 1));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:45:		unset($this->Socket);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:54:		$this->Socket = new CakeSocket();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:55:		$config = $this->Socket->config;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:64:		$this->Socket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:65:		$this->Socket->__construct(array('host' => 'foo-bar'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:67:		$this->assertSame($this->Socket->config, $config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:69:		$this->Socket = new CakeSocket(array('host' => 'www.cakephp.org', 'port' => 23, 'protocol' => 'udp'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:70:		$config = $this->Socket->config;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:76:		$this->assertSame($this->Socket->config, $config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:80: * testSocketConnection method
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:84:	public function testSocketConnection() {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:85:		$this->assertFalse($this->Socket->connected);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:86:		$this->Socket->disconnect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:87:		$this->assertFalse($this->Socket->connected);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:89:			$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:90:			$this->assertTrue($this->Socket->connected);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:91:			$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:92:			$this->assertTrue($this->Socket->connected);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:94:			$this->Socket->disconnect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:96:			$this->Socket = new CakeSocket($config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:97:			$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:98:			$this->assertTrue($this->Socket->connected);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:99:		} catch (SocketException $e) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:120: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:124:		$this->Socket->config = array_merge($this->Socket->config, $data);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:125:		$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:129: * testSocketHost method
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:133:	public function testSocketHost() {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:135:			$this->Socket = new CakeSocket();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:136:			$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:137:			$this->assertEquals('127.0.0.1', $this->Socket->address());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:138:			$this->assertEquals(gethostbyaddr('127.0.0.1'), $this->Socket->host());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:139:			$this->assertEquals(null, $this->Socket->lastError());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:140:			$this->assertTrue(in_array('127.0.0.1', $this->Socket->addresses()));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:142:			$this->Socket = new CakeSocket(array('host' => '127.0.0.1'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:143:			$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:144:			$this->assertEquals('127.0.0.1', $this->Socket->address());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:145:			$this->assertEquals(gethostbyaddr('127.0.0.1'), $this->Socket->host());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:146:			$this->assertEquals(null, $this->Socket->lastError());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:147:			$this->assertTrue(in_array('127.0.0.1', $this->Socket->addresses()));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:148:		} catch (SocketException $e) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:154: * testSocketWriting method
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:158:	public function testSocketWriting() {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:161:			$this->assertTrue((bool)$this->Socket->write($request));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:162:		} catch (SocketException $e) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:168: * testSocketReading method
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:172:	public function testSocketReading() {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:173:		$this->Socket = new CakeSocket(array('timeout' => 5));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:175:			$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:176:			$this->assertEquals(null, $this->Socket->read(26));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:179:			$this->Socket = new CakeSocket($config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:180:			$this->assertTrue($this->Socket->connect());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:181:			$this->assertEquals(null, $this->Socket->read(26));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:182:			$this->assertEquals('2: ' . __d('cake_dev', 'Connection timed out'), $this->Socket->lastError());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:183:		} catch (SocketException $e) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:195:		$this->Socket = new CakeSocket($config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:197:			$this->assertTrue($this->Socket->connect());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:200:			$this->Socket = new CakeSocket($config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:201:			$this->assertFalse($this->Socket->read(1024 * 1024));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:202:			$this->assertEquals('2: ' . __d('cake_dev', 'Connection timed out'), $this->Socket->lastError());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:203:		} catch (SocketException $e) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:214:		$this->Socket = new CakeSocket();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:215:		$this->Socket->setLastError(4, 'some error here');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:216:		$this->assertEquals('4: some error here', $this->Socket->lastError());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:232:		$anotherSocket = new CakeSocket($config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:233:		$anotherSocket->reset();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:234:		$this->assertEquals(array(), $anotherSocket->config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:240: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:243:	public function testEnableCryptoSocketExceptionNoSsl() {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:247:		// testing exception on no ssl socket server for ssl and tls methods
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:248:		$this->Socket = new CakeSocket($configNoSslOrTls);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:249:		$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:250:		$this->Socket->enableCrypto('sslv3', 'client');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:254: * testEnableCryptoSocketExceptionNoTls
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:256: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:259:	public function testEnableCryptoSocketExceptionNoTls() {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:262:		// testing exception on no ssl socket server for ssl and tls methods
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:263:		$this->Socket = new CakeSocket($configNoSslOrTls);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:264:		$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:265:		$this->Socket->enableCrypto('tls', 'client');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:269: * _connectSocketToSslTls
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:273:	protected function _connectSocketToSslTls() {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:276:		$this->Socket = new CakeSocket($configSslTls);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:278:			$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:279:		} catch (SocketException $e) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:292:		$this->_connectSocketToSslTls();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:293:		$this->Socket->enableCrypto('doesntExistMode', 'server');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:294:		$this->Socket->disconnect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:304:		$this->_connectSocketToSslTls();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:305:		$this->assertTrue($this->Socket->enableCrypto('sslv3', 'client'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:306:		$this->Socket->disconnect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:309:		$this->_connectSocketToSslTls();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:310:		$this->assertTrue($this->Socket->enableCrypto('tls', 'client'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:311:		$this->Socket->disconnect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:317: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:322:		$this->_connectSocketToSslTls();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:323:		$this->Socket->enableCrypto('tls', 'client');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:324:		$this->Socket->enableCrypto('tls', 'client');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:330: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:335:		$this->_connectSocketToSslTls();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:336:		$this->Socket->enableCrypto('tls', 'client', false);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:346:		$this->_connectSocketToSslTls();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:347:		$this->assertFalse($this->Socket->encrypted);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:348:		$this->Socket->enableCrypto('tls', 'client', true);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:349:		$this->assertTrue($this->Socket->encrypted);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:353: * test getting the context for a socket.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:367:		$this->Socket = new CakeSocket($config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:368:		$this->Socket->connect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/CakeSocketTest.php:369:		$result = $this->Socket->context();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:30: * Helper to change the socket
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:32: * @param object $socket
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:35:	public function setSocket(CakeSocket $socket) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:36:		$this->_socket = $socket;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:50: * Disabled the socket change
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:54:	protected function _generateSocket() {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:84:		$this->socket = $this->getMock('CakeSocket', array('read', 'write', 'connect', 'enableCrypto'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:87:		$this->SmtpTransport->setSocket($this->socket);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:97:		$this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:98:		$this->socket->expects($this->at(0))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:99:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue("220 Welcome message\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:100:		$this->socket->expects($this->at(2))->method('write')->with("EHLO localhost\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:101:		$this->socket->expects($this->at(3))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:102:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue("250 Accepted\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:113:		$this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:114:		$this->socket->expects($this->at(0))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:115:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue("220 Welcome message\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:116:		$this->socket->expects($this->at(2))->method('write')->with("EHLO localhost\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:117:		$this->socket->expects($this->at(3))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:118:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue("250 Accepted\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:119:		$this->socket->expects($this->at(5))->method('write')->with("STARTTLS\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:120:		$this->socket->expects($this->at(6))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:121:		$this->socket->expects($this->at(7))->method('read')->will($this->returnValue("220 Server ready\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:122:		$this->socket->expects($this->at(8))->method('enableCrypto')->with('tls')->will($this->returnValue(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:123:		$this->socket->expects($this->at(9))->method('write')->with("EHLO localhost\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:124:		$this->socket->expects($this->at(10))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:125:		$this->socket->expects($this->at(11))->method('read')->will($this->returnValue("250 Accepted\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:132: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:137:		$this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:138:		$this->socket->expects($this->at(0))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:139:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue("220 Welcome message\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:140:		$this->socket->expects($this->at(2))->method('write')->with("EHLO localhost\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:141:		$this->socket->expects($this->at(3))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:142:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue("250 Accepted\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:143:		$this->socket->expects($this->at(5))->method('write')->with("STARTTLS\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:144:		$this->socket->expects($this->at(6))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:145:		$this->socket->expects($this->at(7))->method('read')->will($this->returnValue("500 5.3.3 Unrecognized command\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:152: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:157:		$this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:158:		$this->socket->expects($this->at(0))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:159:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue("220 Welcome message\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:160:		$this->socket->expects($this->at(2))->method('write')->with("EHLO localhost\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:161:		$this->socket->expects($this->at(3))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:162:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue("250 Accepted\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:163:		$this->socket->expects($this->at(5))->method('write')->with("AUTH LOGIN\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:164:		$this->socket->expects($this->at(6))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:165:		$this->socket->expects($this->at(7))->method('read')->will($this->returnValue("504 5.7.4 Unrecognized authentication type\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:176:		$this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:177:		$this->socket->expects($this->at(0))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:178:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue("220 Welcome message\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:179:		$this->socket->expects($this->at(2))->method('write')->with("EHLO localhost\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:180:		$this->socket->expects($this->at(3))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:181:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue("200 Not Accepted\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:182:		$this->socket->expects($this->at(5))->method('write')->with("HELO localhost\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:183:		$this->socket->expects($this->at(6))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:184:		$this->socket->expects($this->at(7))->method('read')->will($this->returnValue("250 Accepted\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:191: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:195:		$this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:196:		$this->socket->expects($this->at(0))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:197:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue("220 Welcome message\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:198:		$this->socket->expects($this->at(2))->method('write')->with("EHLO localhost\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:199:		$this->socket->expects($this->at(3))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:200:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue("200 Not Accepted\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:201:		$this->socket->expects($this->at(5))->method('write')->with("HELO localhost\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:202:		$this->socket->expects($this->at(6))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:203:		$this->socket->expects($this->at(7))->method('read')->will($this->returnValue("200 Not Accepted\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:213:		$this->socket->expects($this->at(0))->method('write')->with("AUTH LOGIN\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:214:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:215:		$this->socket->expects($this->at(2))->method('read')->will($this->returnValue("334 Login\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:216:		$this->socket->expects($this->at(3))->method('write')->with("bWFyaw==\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:217:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:218:		$this->socket->expects($this->at(5))->method('read')->will($this->returnValue("334 Pass\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:219:		$this->socket->expects($this->at(6))->method('write')->with("c3Rvcnk=\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:220:		$this->socket->expects($this->at(7))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:221:		$this->socket->expects($this->at(8))->method('read')->will($this->returnValue("235 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:232:		$this->socket->expects($this->any())->method('write')->with($this->logicalNot($this->stringContains('AUTH LOGIN')));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:250:		$this->socket->expects($this->at(0))->method('write')->with("MAIL FROM:<noreply@cakephp.org>\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:251:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:252:		$this->socket->expects($this->at(2))->method('read')->will($this->returnValue("250 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:253:		$this->socket->expects($this->at(3))->method('write')->with("RCPT TO:<cake@cakephp.org>\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:254:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:255:		$this->socket->expects($this->at(5))->method('read')->will($this->returnValue("250 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:256:		$this->socket->expects($this->at(6))->method('write')->with("RCPT TO:<mark@cakephp.org>\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:257:		$this->socket->expects($this->at(7))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:258:		$this->socket->expects($this->at(8))->method('read')->will($this->returnValue("250 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:259:		$this->socket->expects($this->at(9))->method('write')->with("RCPT TO:<juan@cakephp.org>\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:260:		$this->socket->expects($this->at(10))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:261:		$this->socket->expects($this->at(11))->method('read')->will($this->returnValue("250 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:262:		$this->socket->expects($this->at(12))->method('write')->with("RCPT TO:<phpnut@cakephp.org>\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:263:		$this->socket->expects($this->at(13))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:264:		$this->socket->expects($this->at(14))->method('read')->will($this->returnValue("250 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:281:		$this->socket->expects($this->at(0))->method('write')->with("MAIL FROM:<pleasereply@cakephp.org>\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:282:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:283:		$this->socket->expects($this->at(2))->method('read')->will($this->returnValue("250 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:284:		$this->socket->expects($this->at(3))->method('write')->with("RCPT TO:<cake@cakephp.org>\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:285:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:286:		$this->socket->expects($this->at(5))->method('read')->will($this->returnValue("250 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:327:		$this->socket->expects($this->at(0))->method('write')->with("DATA\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:328:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:329:		$this->socket->expects($this->at(2))->method('read')->will($this->returnValue("354 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:330:		$this->socket->expects($this->at(3))->method('write')->with($data);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:331:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:332:		$this->socket->expects($this->at(5))->method('read')->will($this->returnValue("250 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:344:		$this->socket->expects($this->at(0))->method('write')->with("QUIT\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:373:		$this->socket->expects($this->any())->method('connect')->will($this->returnValue(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:374:		$this->socket->expects($this->at(0))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:375:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue("220 Welcome message\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:376:		$this->socket->expects($this->at(2))->method('write')->with("EHLO localhost\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:377:		$this->socket->expects($this->at(3))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:378:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue("250-PIPELINING\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:379:		$this->socket->expects($this->at(5))->method('read')->will($this->returnValue("250-SIZE 102400000\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:380:		$this->socket->expects($this->at(6))->method('read')->will($this->returnValue("250-VRFY\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:381:		$this->socket->expects($this->at(7))->method('read')->will($this->returnValue("250-ETRN\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:382:		$this->socket->expects($this->at(8))->method('read')->will($this->returnValue("250-STARTTLS\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:383:		$this->socket->expects($this->at(9))->method('read')->will($this->returnValue("250-AUTH PLAIN LOGIN\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:384:		$this->socket->expects($this->at(10))->method('read')->will($this->returnValue("250-AUTH=PLAIN LOGIN\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:385:		$this->socket->expects($this->at(11))->method('read')->will($this->returnValue("250-ENHANCEDSTATUSCODES\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:386:		$this->socket->expects($this->at(12))->method('read')->will($this->returnValue("250-8BITMIME\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:387:		$this->socket->expects($this->at(13))->method('read')->will($this->returnValue("250 DSN\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:409:		$this->socket->expects($this->at(0))->method('write')->with("MAIL FROM:<noreply@cakephp.org>\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:410:		$this->socket->expects($this->at(1))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:411:		$this->socket->expects($this->at(2))->method('read')->will($this->returnValue("250 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:412:		$this->socket->expects($this->at(3))->method('write')->with("RCPT TO:<cake@cakephp.org>\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:413:		$this->socket->expects($this->at(4))->method('read')->will($this->returnValue(false));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/SmtpTransportTest.php:414:		$this->socket->expects($this->at(5))->method('read')->will($this->returnValue("250 OK\r\n"));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:188:		$this->setExpectedException('SocketException');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:279:		$this->setExpectedException('SocketException');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:304: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:315: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:512: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:694: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:705: * @expectedException SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:798:		$this->setExpectedException('SocketException');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:815:		$this->setExpectedException('SocketException');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:826:		$this->setExpectedException('SocketException');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:985:		$this->setExpectedException('SocketException');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:999:		$this->setExpectedException('SocketException');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Test/Case/Network/Email/CakeEmailTest.php:1871:		$this->setExpectedException('SocketException');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Command/Task/ViewTask.php:465:			foreach ($model->{$type} as $assocKey => $assocData) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Command/Task/ViewTask.php:467:				$associations[$type][$assocKey]['primaryKey'] = $model->{$assocKey}->primaryKey;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Command/Task/ViewTask.php:468:				$associations[$type][$assocKey]['displayField'] = $model->{$assocKey}->displayField;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Command/Task/ViewTask.php:469:				$associations[$type][$assocKey]['foreignKey'] = $assocData['foreignKey'];
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Command/Task/ViewTask.php:470:				$associations[$type][$assocKey]['controller'] = Inflector::pluralize(Inflector::underscore($modelClass));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Command/Task/ViewTask.php:471:				$associations[$type][$assocKey]['fields'] = array_keys($model->{$assocKey}->schema(true));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Command/Task/ModelTask.php:267:			$assocKeys = array('belongsTo', 'hasOne', 'hasMany', 'hasAndBelongsToMany');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Command/Task/ModelTask.php:268:			foreach ($assocKeys as $assocKey) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Command/Task/ModelTask.php:269:				$this->_printAssociation($currentModelName, $assocKey, $associations);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Templates/skel/Config/database.php.default:28: * the host you connect to the database. To add a socket or port number, use 'port' => #
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Templates/skel/Config/database.php.default:42: * unix_socket =>
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Console/Templates/skel/Config/database.php.default:43: * For MySQL to connect via socket specify the `unix_socket` parameter instead of `host` and `port`
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Core/App.php:38: * For instance if you'd like to use your own HttpSocket class, put it under
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Core/App.php:40: *		app/Network/Http/HttpSocket.php
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Utility/Xml.php:21:App::uses('HttpSocket', 'Network/Http');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Utility/Xml.php:105:				$socket = new HttpSocket(array('request' => array('redirect' => 10)));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Utility/Xml.php:106:				$response = $socket->get($input);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Utility/Xml.php:111:			} catch (SocketException $e) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Controller/Scaffold.php:423:			foreach ($this->ScaffoldModel->{$type} as $assocKey => $assocData) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Controller/Scaffold.php:424:				$associations[$type][$assocKey]['primaryKey'] =
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Controller/Scaffold.php:425:					$this->ScaffoldModel->{$assocKey}->primaryKey;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Controller/Scaffold.php:427:				$associations[$type][$assocKey]['displayField'] =
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Controller/Scaffold.php:428:					$this->ScaffoldModel->{$assocKey}->displayField;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Controller/Scaffold.php:430:				$associations[$type][$assocKey]['foreignKey'] =
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Controller/Scaffold.php:437:				$associations[$type][$assocKey]['plugin'] = $plugin;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Controller/Scaffold.php:439:				$associations[$type][$assocKey]['controller'] =
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Controller/Scaffold.php:443:					$associations[$type][$assocKey]['with'] = $assocData['with'];
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Datasource/Database/Mysql.php:141: * - `unix_socket` Set to the path of the MySQL sock file. Can be used in place
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Datasource/Database/Mysql.php:171:		if (empty($config['unix_socket'])) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Datasource/Database/Mysql.php:174:			$dsn = "mysql:unix_socket={$config['unix_socket']};dbname={$config['database']}";
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Model.php:838:						$assocKey = $k;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Model.php:855:				'table' => $this->hasAndBelongsToMany[$assocKey]['joinTable'],
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Model.php:862:		if (!empty($assocKey)) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Model.php:863:			$this->hasAndBelongsToMany[$assocKey]['joinTable'] = $this->{$name}->table;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Model.php:865:				$this->{$name}->primaryKey = $this->hasAndBelongsToMany[$assocKey]['foreignKey'];
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Model.php:1066: * @param string $assocKey
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Model.php:1069:	protected function _generateAssociation($type, $assocKey) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Model.php:1070:		$class = $assocKey;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Model.php:1072:		$assoc =& $this->{$type}[$assocKey];
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Model/Model.php:1084:						$data = (($type === 'belongsTo') ? Inflector::underscore($assocKey) : Inflector::singularize($this->table)) . '_id';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpResponse.php:3: * HTTP Response from HttpSocket.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpResponse.php:18:App::uses('HttpSocketResponse', 'Network/Http');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpResponse.php:23:		"HttpResponse is deprecated due to naming conflicts. Use HttpSocketResponse instead."
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpResponse.php:28: * HTTP Response from HttpSocket.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpResponse.php:33:class HttpResponse extends HttpSocketResponse {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocketResponse.php:3: * HTTP Response from HttpSocket.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocketResponse.php:19: * HTTP Response from HttpSocket.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocketResponse.php:23:class HttpSocketResponse implements ArrayAccess {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocketResponse.php:147: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocketResponse.php:151:			throw new SocketException(__d('cake_dev', 'Invalid response.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocketResponse.php:155:			throw new SocketException(__d('cake_dev', 'Invalid HTTP response.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocketResponse.php:211: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocketResponse.php:223:				throw new SocketException(__d('cake_dev', 'HttpSocket::_decodeChunkedBody - Could not parse malformed chunk.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/BasicAuthentication.php:29: * @param HttpSocket $http
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/BasicAuthentication.php:34:	public static function authentication(HttpSocket $http, &$authInfo) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/BasicAuthentication.php:43: * @param HttpSocket $http
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/BasicAuthentication.php:48:	public static function proxyAuthentication(HttpSocket $http, &$proxyInfo) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:3: * HTTP Socket connection class.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:19:App::uses('CakeSocket', 'Network');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:24: * CakePHP network socket connection class.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:26: * Core base class for HTTP network communication. HttpSocket can be used as an
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:31:class HttpSocket extends CakeSocket {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:83:	public $responseClass = 'HttpSocketResponse';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:86: * Configuration settings for the HttpSocket and the requests
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:133: * Build an HTTP Socket using the specified configuration.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:138: * `$http = new HttpSocket('http://cakephp.org/');`
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:143: * $http = new HttpSocket(array(
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:149: * See HttpSocket::$config for options that can be used.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:236: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:244:			throw new SocketException(__d('cake_dev', 'Invalid resource.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:250: * Issue the specified request. HttpSocket::get() and HttpSocket::post() wrap this
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:254: * @return mixed false on error, HttpSocketResponse on success
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:255: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:404:			throw new SocketException(__d('cake_dev', 'Class %s not found.', $this->responseClass));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:442: * @param string|array $uri URI to request. Either a string uri, or a uri array, see HttpSocket::_parseUri()
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:474: * @param string|array $uri URI to request. See HttpSocket::_parseUri()
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:487: * @param string|array $uri URI to request, See HttpSocket::_parseUri()
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:500: * @param string|array $uri URI to request, See HttpSocket::_parseUri()
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:534: * $http = new HttpSocket('http://www.cakephp.org');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:542: * `$url = $http->url('http://www.cakephp/search?q=socket', '/%path?%query');`
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:544: * Would return `/search?q=socket`.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:590: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:602:			throw new SocketException(__d('cake_dev', 'Unknown authentication method.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:605:			throw new SocketException(__d('cake_dev', 'The %s does not support authentication.', $authClass));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:614: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:631:			throw new SocketException(__d('cake_dev', 'Unknown authentication method for proxy.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:634:			throw new SocketException(__d('cake_dev', 'The %s does not support proxy authentication.', $authClass));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:642: * @param string|array $uri URI, See HttpSocket::_parseUri()
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:670: * Configure the socket's context. Adds in configuration
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:810: * For the complete capabilities of this implementation take a look at HttpSocketTest::testparseQuery()
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:878: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:886:				throw new SocketException(__d('cake_dev', 'HttpSocket::_buildRequestLine - Passed an invalid request line string. Activate quirks mode to do this.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:904:			throw new SocketException(__d('cake_dev', 'HttpSocket::_buildRequestLine - The "*" asterisk character is only allowed for the following methods: %s. Activate quirks mode to work outside of HTTP/1.1 specs.', implode(',', $asteriskMethods)));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:1012: * Resets the state of this HttpSocket instance to it's initial state (before Object::__construct got executed) or does
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/HttpSocket.php:1015: * @param boolean $full If set to false only HttpSocket::response and HttpSocket::request are reset
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/DigestAuthentication.php:29: * @param HttpSocket $http
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/DigestAuthentication.php:34:	public static function authentication(HttpSocket $http, &$authInfo) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/DigestAuthentication.php:46: * @param HttpSocket $http
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/DigestAuthentication.php:50:	protected static function _getServerInformation(HttpSocket $http, &$authInfo) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/DigestAuthentication.php:73: * @param HttpSocket $http
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Http/DigestAuthentication.php:77:	protected static function _generateHeader(HttpSocket $http, &$authInfo) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:3: * CakePHP Socket connection class.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:22: * CakePHP network socket connection class.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:28:class CakeSocket {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:35:	public $description = 'Remote DataSource Network Socket Interface';
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:38: * Base configuration settings for the socket connection
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:51: * Configuration settings for the socket connection
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:58: * Reference to socket connection resource
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:65: * This boolean contains the current state of the CakeSocket class
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:79: * True if the socket stream is encrypted after a CakeSocket::enableCrypto() call
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:114: * @param array $config Socket configuration, which will be merged with the base configuration
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:115: * @see CakeSocket::$_baseConfig
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:125: * Connect the socket to the given host and port.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:128: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:152:		$this->connection = stream_socket_client(
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:164:			throw new SocketException($errStr, $errNum);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:169:			throw new SocketException($message, E_WARNING);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:180: * socket_stream_client() does not populate errNum, or $errStr when there are
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:265: * Write data to the socket.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:267: * @param string $data The data to write to the socket
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:287: * Read data from the socket. Returns false if no data is available or no connection could be
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:291: * @return mixed Socket data
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:313: * Disconnect the socket from the current connection.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:338: * Resets the state of this Socket instance to it's initial state (before Object::__construct got executed)
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:359: * Encrypts current stream socket, using one of the defined encryption methods
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:366: * @throws SocketException When attempting to enable SSL/TLS fails
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:367: * @see stream_socket_enable_crypto
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:375:			$enableCryptoResult = stream_socket_enable_crypto($this->connection, $enable, $this->_encryptMethods[$type . '_' . $clientOrServer]);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:378:			throw new SocketException($e->getMessage());
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:384:		$errorMessage = __d('cake_dev', 'Unable to perform enableCrypto operation on CakeSocket');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/CakeSocket.php:386:		throw new SocketException($errorMessage);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:359: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:374: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:389: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:404: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:419: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:581: * @throws SocketException If email address does not validate
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:589:			throw new SocketException(__d('cake_dev', 'Invalid email: "%s"', $email));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:601: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:608:			throw new SocketException($throwMessage);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:620: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:662: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:666:			throw new SocketException(__d('cake_dev', '$headers should be an array.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:677: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:681:			throw new SocketException(__d('cake_dev', '$headers should be an array.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:879: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:886:			throw new SocketException(__d('cake_dev', 'Format not available.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:911: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:921:			throw new SocketException(__d('cake_dev', 'Class "%s" not found.', $transportClassname));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:923:			throw new SocketException(__d('cake_dev', 'The "%s" does not have a %s method.', $transportClassname, 'send()'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:934: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:944:				throw new SocketException(__d('cake_dev', 'Invalid format for Message-ID. The text should be something like "<uuid@server.com>"'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:1010: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:1023:					throw new SocketException(__d('cake_dev', 'No file or data specified.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:1026:					throw new SocketException(__d('cake_dev', 'No filename specified.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:1033:					throw new SocketException(__d('cake_dev', 'File not found: "%s"', $fileName));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:1053: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:1112: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:1116:			throw new SocketException(__d('cake_dev', 'From is not specified.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:1119:			throw new SocketException(__d('cake_dev', 'You need to specify at least one destination for to, cc or bcc.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/CakeEmail.php:1158: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/MailTransport.php:31: * @throws SocketException When mail cannot be sent.
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/MailTransport.php:63: * @throws SocketException if mail could not be sent
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/MailTransport.php:72:				throw new SocketException($msg);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/MailTransport.php:78:			throw new SocketException($msg);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:19:App::uses('CakeSocket', 'Network');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:29: * Socket to SMTP server
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:31: * @var CakeSocket
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:33:	protected $_socket;
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:90: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:150: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:153:		$this->_generateSocket();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:154:		if (!$this->_socket->connect()) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:155:			throw new SocketException(__d('cake_dev', 'Unable to connect to SMTP server.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:171:				$this->_socket->enableCrypto('tls');
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:174:		} catch (SocketException $e) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:176:				throw new SocketException(__d('cake_dev', 'SMTP server did not accept the connection or trying to connect to non TLS SMTP server using TLS.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:180:			} catch (SocketException $e2) {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:181:				throw new SocketException(__d('cake_dev', 'SMTP server did not accept the connection.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:190: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:197:					throw new SocketException(__d('cake_dev', 'SMTP server did not accept the username.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:200:					throw new SocketException(__d('cake_dev', 'SMTP server did not accept the password.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:203:				throw new SocketException(__d('cake_dev', 'SMTP authentication method not allowed, check if SMTP server requires TLS'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:205:				throw new SocketException(__d('cake_dev', 'SMTP does not require authentication.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:286: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:302: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:318: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:322:		$this->_socket->disconnect();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:326: * Helper method to generate socket
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:329: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:331:	protected function _generateSocket() {
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:332:		$this->_socket = new CakeSocket($this->_config);
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:341: * @throws SocketException
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:347:			$this->_socket->write($data . "\r\n");
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:353:				$response .= $this->_socket->read();
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:356:				throw new SocketException(__d('cake_dev', 'SMTP timeout.'));
SOURCE/ZoneMinder-1.28.0/web/api/lib/Cake/Network/Email/SmtpTransport.php:369:			throw new SocketException(__d('cake_dev', 'SMTP Error: %s', $response));
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2082:        $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2083:        if ( $socket < 0 )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2085:            Fatal( "socket_create() failed: ".socket_strerror($socket) );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2087:        $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2088:        if ( @socket_connect( $socket, $sock_file ) )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2091:            if ( !socket_write( $socket, $command ) )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2093:                Fatal( "Can't write to control socket: ".socket_strerror(socket_last_error($socket)) );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2095:            socket_shutdown( $socket, 1 );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2097:            while ( $x10Response = socket_read( $socket, 256 ) )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2101:            socket_close( $socket );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2134:    $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2135:    if ( $socket < 0 )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2137:        Fatal( "socket_create() failed: ".socket_strerror($socket) );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2139:    $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2140:    if ( @socket_connect( $socket, $sock_file ) )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2143:        if ( !socket_write( $socket, $command ) )
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2145:            Fatal( "Can't write to control socket: ".socket_strerror(socket_last_error($socket)) );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2147:        socket_shutdown( $socket, 1 );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2148:        $x10Response = socket_read( $socket, 256 );
SOURCE/ZoneMinder-1.28.0/web/includes/functions.php:2149:        socket_close( $socket );
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:181:                $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:182:                if ( $socket < 0 )
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:184:                    Fatal( "socket_create() failed: ".socket_strerror($socket) );
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:186:                $sockFile = ZM_PATH_SOCKS.'/zmcontrol-'.$monitor['Id'].'.sock';
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:187:                if ( @socket_connect( $socket, $sockFile ) )
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:198:                    if ( !socket_write( $socket, $optionString ) )
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:200:                        Fatal( "Can't write to control socket: ".socket_strerror(socket_last_error($socket)) );
SOURCE/ZoneMinder-1.28.0/web/includes/actions.php:202:                    socket_close( $socket );
SOURCE/ZoneMinder-1.28.0/var.installed:384:/srv/http/api/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php
SOURCE/ZoneMinder-1.28.0/var.installed:388:/srv/http/api/lib/Cake/Test/Case/Network/CakeSocketTest.php
SOURCE/ZoneMinder-1.28.0/var.installed:1084:/srv/http/api/lib/Cake/Network/Http/HttpSocketResponse.php
SOURCE/ZoneMinder-1.28.0/var.installed:1086:/srv/http/api/lib/Cake/Network/Http/HttpSocket.php
SOURCE/ZoneMinder-1.28.0/var.installed:1090:/srv/http/api/lib/Cake/Network/CakeSocket.php
SOURCE/ZoneMinder-1.28.0/db/zm_create.sql:714:insert into Config set Id = 62, Name = 'ZM_PATH_SOCKS', Value = '/zoneminder/sock', Type = 'string', DefaultValue = '/zoneminder/sock', Hint = '/absolute/path/to/somewhere', Pattern = '(?^:^((?:/[^/]*)+?)/?$)', Format = ' $1 ', Prompt = 'Path to the various Unix domain socket files that ZoneMinder uses', Help = 'ZoneMinder generally uses Unix domain sockets where possible. This reduces the need for port assignments and prevents external applications from possibly compromising the daemons. However each Unix socket requires a .sock file to be created. This option indicates where those socket files go.', Category = 'paths', Readonly = '0', Requires = '';
SOURCE/ZoneMinder-1.28.0/db/zm_create.sql:848:insert into Config set Id = 132, Name = 'ZM_FRAME_SOCKET_SIZE', Value = '0', Type = 'integer', DefaultValue = '0', Hint = 'integer', Pattern = '(?^:^(\d+)$)', Format = ' $1 ', Prompt = 'Specify the frame server socket buffer size if non-standard', Help = 'For large captured images it is possible for the writes from the analysis daemon to the frame server to fail as the amount to be written exceeds the default buffer size. While the images are then written by the analysis daemon so no data is lost, it defeats the object of the frame server daemon in the first place. You can use this option to indicate that a larger buffer size should be used. Note that you may have to change the existing maximum socket buffer size on your system via sysctl (or in /proc/sys/net/core/wmem_max) to allow this new size to be set. Alternatively you can change the default buffer size on your system in the same way in which case that will be used with no change necessary in this option', Category = 'system', Readonly = '0', Requires = 'ZM_OPT_FRAME_SERVER=1';
SOURCE/ZoneMinder-1.28.0/db/zm_create.sql:850:insert into Config set Id = 134, Name = 'ZM_OPT_TRIGGERS', Value = '0', Type = 'boolean', DefaultValue = 'no', Hint = 'yes|no', Pattern = '(?^i:^([yn]))', Format = ' ($1 =~ /^y/) ? \"yes\" : \"no\" ', Prompt = 'Interface external event triggers via socket or device files', Help = 'ZoneMinder can interact with external systems which prompt or cancel alarms. This is done via the zmtrigger.pl script. This option indicates whether you want to use these external triggers. Most people will say no here.', Category = 'system', Readonly = '0', Requires = '';
SOURCE/ZoneMinder-1.28.0/Makefile.am:25:	( if ! test -e $(DESTDIR)$(ZM_SOCKDIR); then mkdir -p $(DESTDIR)$(ZM_SOCKDIR); fi; if test "$(DESTDIR)$(ZM_SOCKDIR)" != "/var/run"; then chown $(webuser):$(webgroup) $(DESTDIR)$(ZM_SOCKDIR); chmod u+w $(DESTDIR)$(ZM_SOCKDIR); fi )
SOURCE/ZoneMinder-1.28.0/Makefile.am:31:	@-( if test "$(DESTDIR)$(ZM_SOCKDIR)" != "/var/run"; then rm -rf $(DESTDIR)$(ZM_SOCKDIR); fi )
SOURCE/ZoneMinder-1.28.0/a.sh:13:      -DZM_SOCKDIR=/zoneminder/sock \
SOURCE/ZoneMinder-1.28.0/tdw_build.sh:12:      -DZM_SOCKDIR=/zoneminder/socks .
SOURCE/ZoneMinder-1.28.0/docs/userguide/components.rst:55:  This is an optional script that is a more generic solution to external triggering of alarms. It can handle external connections via either internet socket, unix socket or file/device interfaces. You can either use it ‘as is’ if you can interface with the existing format, or override connections and channels to customise it to your needs. The format of triggers used by zmtrigger.pl is as follows "<id>|<action>|<score>|<cause>|<text>|<showtext>" where
SOURCE/ZoneMinder-1.28.0/CMakeCache.txt:420://Location of Unix domain socket files, default /var/run/zm
SOURCE/ZoneMinder-1.28.0/CMakeCache.txt:421:ZM_SOCKDIR:PATH=/zoneminder/sock
